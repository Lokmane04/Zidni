import VisualisationComponent from "../components/global/Visualisation/index";
import * as storageUnits from "./visualisation/sfsd/storageUnits.json";
import File from "./visualisation/sfsd/File.jsx";
import * as creatingDanceTable from "./visualisation/sfsd/CreatingIndexTable.json";
import * as RepresentationsOfMultiValued from "./visualisation/sfsd/RepresentationsOfMultiValued.json";
import * as blockCirculation from "./visualisation/sfsd/blockCirculation.json";
import * as recordTypes from "./visualisation/sfsd/recordTypes.json";
import { Fragment } from "react";
import * as ReturnToZero from "../data/visualisation/sfsd/Return To Zero.json"
import * as NoReturnToZero from "../data/visualisation/sfsd/No Return To Zero.json"
import * as PhaseEncoding from "../data/visualisation/sfsd/Phase Encoding.json"
import * as NRZNBloque from "../data/visualisation/sfsd/FNRZ Non-Bloqué.json"
import * as NRZBloque from "../data/visualisation/sfsd/FNRZ Bloqué.json"
import * as PENBloque from "../data/visualisation/sfsd/PE Non-Bloqué.json"
import * as PEBloque from "../data/visualisation/sfsd/PE Bloqué.json"
import * as FormEnrg from "../data/visualisation/sfsd/Format D'enregistrement Physique.json"
import * as FormEnrgFixedSizeNonBlocked from "../data/visualisation/sfsd/Le format des enregistrements de taille fixe non bloqués.json"
import * as FormEnrgFixedSizeBlocked from "../data/visualisation/sfsd/Le format des enregistrements de taille fixe bloqués.json"
import * as FormEnrgVarSizeNonBlocked from "../data/visualisation/sfsd/Le format des enregistrements de taille variable non bloqués.json"
import * as DiskOrganization from "../data/visualisation/sfsd/disk organization.json"

import { title } from "process";

export const courses = [
  {
    id: 23,
    title: "File structure and data structure",
    description:
      "The File Structures and Data Structures module studies file access, data structures, and associated algorithms to efficiently manipulate massive data, optimizing transfers between central and external memory.",
    chapters: [
      {
        chapterId: 1,
        title: "General information about files",
        chapterDescription:
          "Chapter 1 explains how a file is made up of a set of these physical blocks, containing uninterpreted bytes, and how data is organized inside these blocks. Files can be binary or text types, with significant differences in their representation and portability between systems. The chapter goes on to detail the abstract machine for file structures, which defines basic operations such as opening, closing, reading and writing files.",
        subChapter: [
          {
            id: 111,
            title: "1) Introduction",
            subChapterContent: (
              <div>
                A file, in computing, is a way of storing, organizing and
                managing information (or data) permanently or temporarily on a
                storage medium, such as a hard drive, a optical disk, USB stick,
                etc. The data contained in a file can be of any nature : texts,
                images, sounds, videos, programs, etc. Generally speaking, we
                can distinguish two types of files depending on their content:
                Files programs and data files.
                <br />{" "}
                <h4>
                  <strong>Program files:</strong>
                </h4>{" "}
                These are files that contain the instructions necessary to the
                execution of a program. Example : <br />- Chrome.exe: is a
                program file that allows you to browse the web. <br />-
                Excel.exe: is a program file that allows you to create and
                manipulate spreadsheets.
                <br />
                <h4>
                  <strong>Data files:</strong>
                </h4>{" "}
                These are files specially designed to store and organize data.
                data that a program is likely to use, as well as the results it
                can achieve. Unlike program files, data files are scalable,
                which means that it is possible to modify them, to delete
                information from them, to add information to them information,
                or simply to consult them. Example: Student.dat is a data file
                that may contain information relating to students of a school
                such as last name, first name, date of birth, grade, etc.
              </div>
            ),
            subChapterVisualisation: null, // no visualisation is needed for this subchapter
          },
          {
            id: 122,
            title: "2) Basic concepts",
            subChapterContent: (
              <div>
                The computer only understands binary language, a sequence of 0s
                and 1s. This is why all information must be converted into a
                series of bits before being processed by the computer. This
                information is organized into:
                <ul>
                  <li>- Characters</li>
                  <li>- Zones</li>
                  <li>- Records</li>
                  <li>- Files</li>
                </ul>
                <h4>
                  <strong>2.1.Character:</strong>
                </h4>{" "}
                The character is a grouping of bits (7, 8, 16,...) used to
                represent a character alphanumeric (0, 1, 2, a, b, c, ...) or a
                special character (#, @, ...) in any encoding such as as: ASCII,
                UNICODE, etc. Character is the smallest unit of information that
                can be represented and processed by a computer.{" "}
                <h4>
                  <strong>2.2.Zone (Variable):</strong>
                </h4>{" "}
                It designates a grouping of successive characters which
                represents information accessible by a treatment. In a program,
                to distinguish between the different zones, we associate them
                with identifiers.{" "}
                <h4>
                  <strong>2.3.Record:</strong>
                </h4>{" "}
                A record is a set of zones grouping together information
                (contained in zones) of various types related to the same
                subject. The zones of a record can also be called 'fields'.{" "}
                <h4>
                  <strong>2.4.File:</strong>
                </h4>{" "}
                On the other hand, a file, abstractly, is a set of information
                grouped in the form of records, which describe individuals or
                objects (concrete or abstract) possessing common
                characteristics. A file is characterized by the following
                elements:
                <ul>
                  <li>-NAME</li>
                  <li>
                    - EXTENSION: is a filename suffix made to identify its
                    format. Example: ('name'.docx): text file, ('name'.gif):
                    image file
                  </li>
                  <li>
                    - SIZE (or volume): It designates the number of characters
                    contained in the file (2500 characters, 1000 characters...)
                  </li>
                  <li>
                    - STRUCTURE: the file structure defines how the data is
                    organized.
                  </li>
                </ul>
              </div>
            ),
            subChapterVisualisation: (
              <VisualisationComponent
                animationData={storageUnits}
                title={"Information units"}
                description={"These information are organized into:"}
              />
            ),
          },
          {
            id: 133,
            title: "3) Logical file and physical file",
            subChapterContent: (
              <div>
                <h4>
                  <strong>Logical file:</strong>
                </h4>{" "}
                A logical file describes the structure of the data it contains
                (the fields and records), without referring to the way in which
                this data is stored physically on the storage medium. The
                records of a logical file are called articles (or logical
                records).{" "}
                <h4>
                  <strong>Physical file:</strong>
                </h4>{" "}
                A physical file corresponds to the entity allocated on the
                physical medium permanent (magnetic disk, optical disk, etc.)
                and physically contains the recordings defined in the logic
                file. In other words, a physical file is the result of storing
                the logical file on physical media. The records in the physical
                file are called physical records (or blocks). <br />
                <br />
                <em>Analogy:</em> The relationship between a logical file and a
                physical file is almost as close as that between a cooking
                recipe and the resulting dish, before and after its preparation.
                Here the recipe represents the logical file, and the flat
                represents the physical file.
              </div>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 144,
            title: "4) Logical recording and physical recording",
            subChapterContent: (
              <div>
                <h4>
                  <strong>Logical Recording:</strong>
                </h4>
                Logical recording refers to the manner in which data is
                structured and organized at the conceptual or abstract level
                (independently of the medium physical).
                <h4>
                  <strong>Physical record:</strong>
                </h4>{" "}
                The physical record (or block) represents the quantity of
                information exchanged between the central memory and the storage
                unit. In other words, it is the smallest data entity that can be
                read or written in a single operation.
                <ul>
                  <li>
                    - A physical record can contain only one logical record.
                  </li>
                  <li>
                    - A physical record can contain several logical records.
                  </li>
                  <li>
                    - Several physical recordings can contain a single recording
                    logic.
                  </li>
                </ul>
                <br />
                The parameter that makes it possible to distinguish between
                these three cases is called 'blocking factor'.
              </div>
            ), //TODO: add LogicalRecord svg here
            subChapterVisualisation: (
              <VisualisationComponent
                animationData={blockCirculation}
                title={"Block circulation"}
                description={`Definition of "Buffer": It is a region of memory used to temporarily hold data while it is being moved from one place to another.Buffers are generally used when there is a difference between the rate at which data is received and the rate at which it can be processed.`}
              />
            ),
          },
          {
            id: 155,
            title: "5) Blocking factor and its interest",
            subChapterContent: (
              <div>
                The blocking factor is the number of logical records contained
                in a physical record. It is calculated as follows:
                <br />
                <em>
                  Blocking factor = Number of logical records / Number of
                  physical records.
                </em>
                <br />
                The operations of reading and writing the file data on the
                storage medium are carried out record by record. Exchanges are
                made between the main memory (RAM) and the physical media.
                Consequently, blocking a certain number of logical records into
                physical records essentially makes it possible to optimize
                Input/Output (I/O) operations by saving response time.
                <br />
                Example : Let's say we have a file containing 100 records, and
                we use a blocking factor of 1 (FB = 1). In this configuration,
                we would need 100 Input/Output (I/O) operations to read the
                entire file. However, if we increase the blocking factor to 2,
                then we could accomplish the same task using only 50 I/O
                operations.
              </div>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 166,
            title: "6) Types of records",
            subChapterContent: (
              <Fragment>
                <div className="flex justify-evenly item-baseline">
                  <svg
                    id="table"
                    width="285"
                    height="57"
                    viewBox="0 0 285 57"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <rect
                      id="Rectangle 48"
                      x="0.241741"
                      y="31.2864"
                      width="108.949"
                      height="25.4719"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 24"
                      x="109.198"
                      y="0.241741"
                      width="43.7653"
                      height="31.0701"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 42"
                      x="152.971"
                      y="0.241741"
                      width="43.7653"
                      height="31.0701"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 45"
                      x="196.744"
                      y="0.241741"
                      width="43.7653"
                      height="31.0701"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 25"
                      x="109.198"
                      y="31.2864"
                      width="43.7653"
                      height="25.4719"
                      fill="#D9D9D9"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 43"
                      x="152.971"
                      y="31.2864"
                      width="43.7653"
                      height="25.4719"
                      fill="#D9D9D9"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 46"
                      x="196.744"
                      y="31.2864"
                      width="43.7653"
                      height="25.4719"
                      fill="#D9D9D9"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 49"
                      x="240.993"
                      y="0.241741"
                      width="43.7653"
                      height="31.0701"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 50"
                      x="240.993"
                      y="31.2864"
                      width="43.7653"
                      height="25.4719"
                      fill="#D9D9D9"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <rect
                      id="Rectangle 23"
                      x="0.241741"
                      y="0.241741"
                      width="108.949"
                      height="31.0701"
                      fill="#0074C7"
                      fillOpacity="0.93"
                      stroke="#8B9296"
                      strokeWidth="0.483482"
                    />
                    <path
                      id="Size (characters)"
                      d="M22.2524 44.6008L23.0683 44.5243L23.0598 44.741C23.0598 44.9818 23.1151 45.2028 23.2255 45.4039C23.336 45.6022 23.5187 45.7566 23.7737 45.8671C24.0287 45.9747 24.3318 46.0285 24.6831 46.0285C25.1817 46.0285 25.5613 45.9195 25.8219 45.7013C26.0854 45.4832 26.2171 45.2339 26.2171 44.9535C26.2171 44.758 26.1477 44.5795 26.0089 44.418C25.8672 44.2594 25.4805 44.0441 24.8488 43.7721C24.3587 43.5597 24.0244 43.3968 23.8459 43.2835C23.5655 43.0993 23.3587 42.8996 23.2255 42.6843C23.0924 42.4662 23.0258 42.2183 23.0258 41.9407C23.0258 41.6206 23.1136 41.3316 23.2893 41.0738C23.4649 40.816 23.7213 40.6191 24.0584 40.4831C24.3984 40.3472 24.7808 40.2792 25.2057 40.2792C25.7128 40.2792 26.1406 40.3642 26.489 40.5341C26.8375 40.7041 27.0896 40.9307 27.2454 41.214C27.4041 41.4973 27.4834 41.7679 27.4834 42.0257C27.4834 42.0512 27.482 42.0936 27.4791 42.1531L26.676 42.2169C26.676 42.0412 26.6604 41.9038 26.6293 41.8047C26.5726 41.6319 26.4848 41.486 26.3658 41.367C26.2468 41.248 26.0825 41.1531 25.8729 41.0823C25.6661 41.0086 25.4338 40.9718 25.176 40.9718C24.7227 40.9718 24.37 41.0738 24.1179 41.2778C23.9253 41.4336 23.829 41.6404 23.829 41.8982C23.829 42.0512 23.8686 42.1885 23.9479 42.3104C24.0273 42.4293 24.1703 42.5469 24.3771 42.6631C24.5244 42.7452 24.8743 42.9081 25.4267 43.1517C25.8743 43.35 26.1831 43.5058 26.3531 43.6192C26.5797 43.7693 26.7539 43.952 26.8757 44.1673C26.9976 44.3798 27.0585 44.622 27.0585 44.894C27.0585 45.2311 26.9551 45.5427 26.7483 45.8288C26.5443 46.1121 26.261 46.3317 25.8984 46.4875C25.5358 46.6433 25.1208 46.7212 24.6533 46.7212C23.9479 46.7212 23.3714 46.5682 22.9238 46.2623C22.4791 45.9535 22.2553 45.3996 22.2524 44.6008ZM28.8262 41.2565L29.0089 40.3854H29.7738L29.5911 41.2565H28.8262ZM27.7044 46.615L28.6477 42.1021H29.4169L28.4735 46.615H27.7044ZM29.5528 46.615L29.6761 46.0201L32.1024 43.2877C32.2753 43.0951 32.4679 42.8954 32.6804 42.6886C32.3149 42.7254 32.0529 42.7438 31.8942 42.7438H30.2157L30.3517 42.1021H33.8404L33.7384 42.5866L31.2908 45.3359C31.152 45.4917 30.9452 45.7056 30.6704 45.9776C31.0982 45.9521 31.3914 45.9393 31.55 45.9393H33.3263L33.186 46.615H29.5528ZM37.3377 45.0809L38.0855 45.1574C37.9779 45.5285 37.73 45.8812 37.3419 46.2155C36.9566 46.5498 36.4963 46.7169 35.9609 46.7169C35.6266 46.7169 35.3192 46.6405 35.0387 46.4875C34.7611 46.3317 34.5487 46.1065 34.4013 45.8118C34.2569 45.5172 34.1846 45.1815 34.1846 44.8047C34.1846 44.3118 34.2979 43.8345 34.5246 43.3727C34.754 42.9081 35.0501 42.5639 35.4127 42.3401C35.7753 42.1135 36.1677 42.0002 36.5898 42.0002C37.128 42.0002 37.5572 42.1673 37.8773 42.5016C38.2003 42.8359 38.3617 43.292 38.3617 43.8699C38.3617 44.0908 38.3419 44.3175 38.3023 44.5498H34.9793C34.9679 44.6376 34.9623 44.7169 34.9623 44.7877C34.9623 45.2098 35.0586 45.5328 35.2512 45.7566C35.4467 45.9776 35.6847 46.088 35.9651 46.088C36.2286 46.088 36.4878 46.0016 36.7427 45.8288C36.9977 45.656 37.196 45.4067 37.3377 45.0809ZM35.1025 43.9634H37.6351C37.6379 43.884 37.6394 43.8274 37.6394 43.7934C37.6394 43.4081 37.543 43.1135 37.3504 42.9095C37.1578 42.7027 36.9099 42.5993 36.6068 42.5993C36.2781 42.5993 35.9779 42.7126 35.7059 42.9393C35.4368 43.1659 35.2356 43.5073 35.1025 43.9634ZM42.4029 48.4464C41.9581 47.4719 41.7357 46.4705 41.7357 45.4421C41.7357 44.7566 41.825 44.1192 42.0034 43.5299C42.1847 42.9379 42.4595 42.3529 42.8278 41.7749C43.0714 41.3897 43.461 40.8911 43.9964 40.2792H44.5955C44.2641 40.6333 43.9128 41.1319 43.5417 41.7749C43.1734 42.418 42.9057 43.0498 42.7386 43.6702C42.5714 44.2906 42.4879 44.9138 42.4879 45.5399C42.4879 46.4747 42.6508 47.4436 42.9765 48.4464H42.4029ZM47.3024 44.9705L48.0715 45.0512C47.8789 45.6149 47.6041 46.0342 47.2471 46.309C46.893 46.581 46.4893 46.7169 46.0361 46.7169C45.546 46.7169 45.148 46.5583 44.842 46.241C44.5389 45.9237 44.3873 45.4804 44.3873 44.911C44.3873 44.418 44.4851 43.9336 44.6805 43.4577C44.876 42.9818 45.155 42.6206 45.5177 42.3741C45.8831 42.1248 46.2995 42.0002 46.767 42.0002C47.2514 42.0002 47.6353 42.1376 47.9185 42.4123C48.2018 42.6843 48.3435 43.0455 48.3435 43.4959L47.5871 43.5469C47.5843 43.2608 47.5007 43.037 47.3364 42.8755C47.1749 42.7141 46.961 42.6333 46.6947 42.6333C46.3859 42.6333 46.1182 42.731 45.8916 42.9265C45.665 43.122 45.4865 43.4194 45.3562 43.8189C45.2287 44.2155 45.165 44.5979 45.165 44.9662C45.165 45.3515 45.2499 45.6404 45.4199 45.8331C45.5899 46.0257 45.7995 46.122 46.0488 46.122C46.2981 46.122 46.5361 46.0271 46.7627 45.8373C46.9922 45.6475 47.1721 45.3586 47.3024 44.9705ZM48.539 46.615L49.8393 40.3854H50.6084L50.1112 42.7778C50.3973 42.5002 50.6636 42.3019 50.9101 42.1829C51.1566 42.0611 51.4101 42.0002 51.6707 42.0002C52.0447 42.0002 52.335 42.0993 52.5418 42.2976C52.7486 42.4931 52.852 42.7523 52.852 43.0752C52.852 43.2339 52.8067 43.5257 52.7161 43.9506L52.1594 46.615H51.3903L51.9639 43.8826C52.0461 43.486 52.0872 43.2367 52.0872 43.1347C52.0872 42.9874 52.0362 42.867 51.9342 42.7735C51.8322 42.6801 51.6849 42.6333 51.4923 42.6333C51.2146 42.6333 50.9498 42.707 50.6976 42.8543C50.4455 42.9988 50.2472 43.1985 50.1027 43.4534C49.9611 43.7056 49.8308 44.1135 49.7118 44.6773L49.3081 46.615H48.539ZM56.4258 46.054C56.1595 46.2835 55.9031 46.4521 55.6566 46.5597C55.4102 46.6645 55.1467 46.7169 54.8662 46.7169C54.4498 46.7169 54.1141 46.5951 53.8591 46.3515C53.6042 46.105 53.4767 45.7906 53.4767 45.4081C53.4767 45.156 53.5334 44.9336 53.6467 44.741C53.7628 44.5455 53.9158 44.3897 54.1056 44.2736C54.2954 44.1546 54.5277 44.0696 54.8025 44.0186C54.9753 43.9846 55.3025 43.9577 55.7841 43.9379C56.2685 43.918 56.6156 43.867 56.8252 43.7849C56.8847 43.5753 56.9144 43.401 56.9144 43.2622C56.9144 43.0837 56.8493 42.9435 56.719 42.8415C56.5405 42.6999 56.2799 42.6291 55.9371 42.6291C55.6141 42.6291 55.3492 42.7013 55.1424 42.8458C54.9385 42.9874 54.7897 43.19 54.6963 43.4534L53.9186 43.3855C54.0773 42.9379 54.328 42.5951 54.6708 42.3571C55.0164 42.1191 55.4512 42.0002 55.9753 42.0002C56.5334 42.0002 56.9753 42.1333 57.3011 42.3996C57.5504 42.5979 57.6751 42.8557 57.6751 43.173C57.6751 43.4138 57.6397 43.6928 57.5688 44.0101L57.3181 45.1319C57.2388 45.4889 57.1991 45.7793 57.1991 46.0031C57.1991 46.1447 57.2303 46.3487 57.2926 46.615H56.515C56.4725 46.4676 56.4427 46.2807 56.4258 46.054ZM56.7105 44.3288C56.6028 44.3713 56.4867 44.4039 56.362 44.4265C56.2402 44.4492 56.0348 44.4733 55.7459 44.4988C55.2983 44.5384 54.9824 44.5894 54.7982 44.6518C54.6141 44.7112 54.4753 44.8076 54.3818 44.9407C54.2883 45.0739 54.2416 45.2212 54.2416 45.3826C54.2416 45.5979 54.3152 45.775 54.4625 45.9138C54.6127 46.0526 54.8252 46.122 55.1 46.122C55.3549 46.122 55.6 46.0555 55.8351 45.9223C56.0702 45.7863 56.2558 45.5979 56.3918 45.3572C56.5277 45.1164 56.634 44.7736 56.7105 44.3288ZM58.2275 46.615L59.1708 42.1021H59.8507L59.6595 43.0243C59.8918 42.6758 60.1184 42.418 60.3394 42.2509C60.5632 42.0837 60.7913 42.0002 61.0236 42.0002C61.1765 42.0002 61.3649 42.0554 61.5887 42.1659L61.2743 42.8798C61.1411 42.7835 60.9952 42.7353 60.8366 42.7353C60.5675 42.7353 60.2912 42.8854 60.008 43.1857C59.7247 43.486 59.5023 44.0257 59.3408 44.8047L58.9584 46.615H58.2275ZM64.1681 46.054C63.9018 46.2835 63.6454 46.4521 63.3989 46.5597C63.1525 46.6645 62.889 46.7169 62.6086 46.7169C62.1921 46.7169 61.8564 46.5951 61.6015 46.3515C61.3465 46.105 61.219 45.7906 61.219 45.4081C61.219 45.156 61.2757 44.9336 61.389 44.741C61.5051 44.5455 61.6581 44.3897 61.8479 44.2736C62.0377 44.1546 62.27 44.0696 62.5448 44.0186C62.7176 43.9846 63.0448 43.9577 63.5264 43.9379C64.0109 43.918 64.3579 43.867 64.5675 43.7849C64.627 43.5753 64.6568 43.401 64.6568 43.2622C64.6568 43.0837 64.5916 42.9435 64.4613 42.8415C64.2828 42.6999 64.0222 42.6291 63.6794 42.6291C63.3564 42.6291 63.0916 42.7013 62.8848 42.8458C62.6808 42.9874 62.5321 43.19 62.4386 43.4534L61.661 43.3855C61.8196 42.9379 62.0703 42.5951 62.4131 42.3571C62.7587 42.1191 63.1936 42.0002 63.7176 42.0002C64.2757 42.0002 64.7177 42.1333 65.0434 42.3996C65.2927 42.5979 65.4174 42.8557 65.4174 43.173C65.4174 43.4138 65.382 43.6928 65.3112 44.0101L65.0604 45.1319C64.9811 45.4889 64.9415 45.7793 64.9415 46.0031C64.9415 46.1447 64.9726 46.3487 65.0349 46.615H64.2573C64.2148 46.4676 64.1851 46.2807 64.1681 46.054ZM64.4528 44.3288C64.3451 44.3713 64.229 44.4039 64.1043 44.4265C63.9825 44.4492 63.7771 44.4733 63.4882 44.4988C63.0406 44.5384 62.7247 44.5894 62.5406 44.6518C62.3564 44.7112 62.2176 44.8076 62.1241 44.9407C62.0307 45.0739 61.9839 45.2212 61.9839 45.3826C61.9839 45.5979 62.0576 45.775 62.2049 45.9138C62.355 46.0526 62.5675 46.122 62.8423 46.122C63.0972 46.122 63.3423 46.0555 63.5774 45.9223C63.8125 45.7863 63.9981 45.5979 64.1341 45.3572C64.2701 45.1164 64.3763 44.7736 64.4528 44.3288ZM69.0846 44.9705L69.8537 45.0512C69.6611 45.6149 69.3863 46.0342 69.0293 46.309C68.6752 46.581 68.2715 46.7169 67.8183 46.7169C67.3282 46.7169 66.9302 46.5583 66.6242 46.241C66.3211 45.9237 66.1695 45.4804 66.1695 44.911C66.1695 44.418 66.2673 43.9336 66.4627 43.4577C66.6582 42.9818 66.9372 42.6206 67.2999 42.3741C67.6653 42.1248 68.0817 42.0002 68.5492 42.0002C69.0336 42.0002 69.4174 42.1376 69.7007 42.4123C69.984 42.6843 70.1257 43.0455 70.1257 43.4959L69.3693 43.5469C69.3665 43.2608 69.2829 43.037 69.1186 42.8755C68.9571 42.7141 68.7432 42.6333 68.4769 42.6333C68.1681 42.6333 67.9004 42.731 67.6738 42.9265C67.4472 43.122 67.2687 43.4194 67.1384 43.8189C67.0109 44.2155 66.9472 44.5979 66.9472 44.9662C66.9472 45.3515 67.0321 45.6404 67.2021 45.8331C67.3721 46.0257 67.5817 46.122 67.831 46.122C68.0803 46.122 68.3183 46.0271 68.5449 45.8373C68.7744 45.6475 68.9543 45.3586 69.0846 44.9705ZM72.1186 45.9903L71.9911 46.6192C71.807 46.6674 71.6285 46.6914 71.4557 46.6914C71.1498 46.6914 70.9061 46.6164 70.7248 46.4662C70.5889 46.3529 70.5209 46.1985 70.5209 46.0031C70.5209 45.9039 70.5577 45.6759 70.6313 45.3189L71.1795 42.6971H70.5719L70.6951 42.1021H71.3027L71.5365 40.9931L72.4161 40.4619L72.0719 42.1021H72.8283L72.7008 42.6971H71.9486L71.426 45.1914C71.3608 45.5087 71.3282 45.6985 71.3282 45.7608C71.3282 45.8515 71.3537 45.9209 71.4047 45.9691C71.4586 46.0172 71.545 46.0413 71.6639 46.0413C71.8339 46.0413 71.9855 46.0243 72.1186 45.9903ZM76.0578 45.0809L76.8057 45.1574C76.698 45.5285 76.4501 45.8812 76.062 46.2155C75.6767 46.5498 75.2164 46.7169 74.681 46.7169C74.3467 46.7169 74.0393 46.6405 73.7589 46.4875C73.4812 46.3317 73.2688 46.1065 73.1215 45.8118C72.977 45.5172 72.9048 45.1815 72.9048 44.8047C72.9048 44.3118 73.0181 43.8345 73.2447 43.3727C73.4742 42.9081 73.7702 42.5639 74.1328 42.3401C74.4954 42.1135 74.8878 42.0002 75.3099 42.0002C75.8481 42.0002 76.2773 42.1673 76.5974 42.5016C76.9204 42.8359 77.0819 43.292 77.0819 43.8699C77.0819 44.0908 77.062 44.3175 77.0224 44.5498H73.6994C73.688 44.6376 73.6824 44.7169 73.6824 44.7877C73.6824 45.2098 73.7787 45.5328 73.9713 45.7566C74.1668 45.9776 74.4048 46.088 74.6852 46.088C74.9487 46.088 75.2079 46.0016 75.4629 45.8288C75.7178 45.656 75.9161 45.4067 76.0578 45.0809ZM73.8226 43.9634H76.3552C76.3581 43.884 76.3595 43.8274 76.3595 43.7934C76.3595 43.4081 76.2632 43.1135 76.0705 42.9095C75.8779 42.7027 75.63 42.5993 75.3269 42.5993C74.9983 42.5993 74.698 42.7126 74.426 42.9393C74.1569 43.1659 73.9558 43.5073 73.8226 43.9634ZM77.5875 46.615L78.5309 42.1021H79.2108L79.0196 43.0243C79.2519 42.6758 79.4785 42.418 79.6995 42.2509C79.9233 42.0837 80.1513 42.0002 80.3836 42.0002C80.5366 42.0002 80.725 42.0554 80.9488 42.1659L80.6343 42.8798C80.5012 42.7835 80.3553 42.7353 80.1966 42.7353C79.9275 42.7353 79.6513 42.8854 79.368 43.1857C79.0847 43.486 78.8623 44.0257 78.7009 44.8047L78.3184 46.615H77.5875ZM80.5578 45.0724L81.327 45.0257C81.327 45.2467 81.361 45.4351 81.429 45.5909C81.4969 45.7467 81.6216 45.8742 81.8029 45.9733C81.987 46.0725 82.2009 46.122 82.4446 46.122C82.7845 46.122 83.0395 46.054 83.2094 45.9181C83.3794 45.7821 83.4644 45.622 83.4644 45.4379C83.4644 45.3047 83.4134 45.1787 83.3114 45.0597C83.2066 44.9407 82.9502 44.7948 82.5423 44.622C82.1372 44.4464 81.878 44.3231 81.7647 44.2523C81.5749 44.1362 81.4318 44.0002 81.3355 43.8444C81.2392 43.6857 81.191 43.5044 81.191 43.3005C81.191 42.9435 81.3326 42.6376 81.6159 42.3826C81.8992 42.1276 82.2958 42.0002 82.8057 42.0002C83.3723 42.0002 83.8029 42.1319 84.0976 42.3954C84.395 42.656 84.5494 43.0002 84.5607 43.4279L83.8086 43.4789C83.7973 43.207 83.7009 42.9917 83.5196 42.833C83.3383 42.6744 83.082 42.5951 82.7505 42.5951C82.4842 42.5951 82.2774 42.656 82.1301 42.7778C81.9828 42.8996 81.9091 43.0313 81.9091 43.173C81.9091 43.3146 81.9729 43.4393 82.1004 43.5469C82.1853 43.6206 82.4049 43.7339 82.759 43.8869C83.3482 44.1418 83.7194 44.343 83.8723 44.4903C84.116 44.7254 84.2378 45.0115 84.2378 45.3487C84.2378 45.5725 84.1684 45.792 84.0296 46.0073C83.8936 46.2226 83.6839 46.3954 83.4007 46.5257C83.1202 46.6532 82.7888 46.7169 82.4063 46.7169C81.8851 46.7169 81.4417 46.588 81.0763 46.3303C80.7108 46.0725 80.538 45.6532 80.5578 45.0724ZM86.2732 40.2792C86.7208 41.2537 86.9446 42.2537 86.9446 43.2792C86.9446 43.9676 86.854 44.6064 86.6727 45.1957C86.4942 45.7849 86.2208 46.3699 85.8525 46.9507C85.6061 47.3359 85.2165 47.8345 84.684 48.4464H84.0848C84.4134 48.0895 84.7633 47.5895 85.1344 46.9464C85.5055 46.3033 85.7732 45.673 85.9375 45.0554C86.1047 44.435 86.1882 43.8104 86.1882 43.1815C86.1882 42.2466 86.0253 41.2792 85.6996 40.2792H86.2732Z"
                      fill="#E4C000"
                    />
                    <path
                      id="Fields (zones)"
                      d="M30.1509 20.5738L31.4512 14.3443H35.5008L35.3521 15.0539H32.1353L31.7232 17.0384H34.9994L34.8507 17.748H31.5744L30.9838 20.5738H30.1509ZM36.4569 15.2154L36.6397 14.3443H37.4045L37.2218 15.2154H36.4569ZM35.3351 20.5738L36.2785 16.061H37.0476L36.1042 20.5738H35.3351ZM40.6171 19.0398L41.3649 19.1163C41.2573 19.4874 41.0094 19.8401 40.6213 20.1744C40.236 20.5087 39.7757 20.6758 39.2403 20.6758C38.906 20.6758 38.5986 20.5993 38.3182 20.4463C38.0405 20.2905 37.8281 20.0653 37.6808 19.7707C37.5363 19.4761 37.464 19.1404 37.464 18.7636C37.464 18.2707 37.5774 17.7933 37.804 17.3316C38.0335 16.867 38.3295 16.5228 38.6921 16.299C39.0547 16.0723 39.4471 15.959 39.8692 15.959C40.4074 15.959 40.8366 16.1262 41.1567 16.4604C41.4797 16.7947 41.6412 17.2508 41.6412 17.8287C41.6412 18.0497 41.6213 18.2763 41.5817 18.5086H38.2587C38.2473 18.5965 38.2417 18.6758 38.2417 18.7466C38.2417 19.1687 38.338 19.4917 38.5306 19.7155C38.7261 19.9364 38.9641 20.0469 39.2445 20.0469C39.508 20.0469 39.7672 19.9605 40.0221 19.7877C40.2771 19.6149 40.4754 19.3656 40.6171 19.0398ZM38.3819 17.9222H40.9145C40.9173 17.8429 40.9188 17.7862 40.9188 17.7523C40.9188 17.367 40.8224 17.0724 40.6298 16.8684C40.4372 16.6616 40.1893 16.5582 39.8862 16.5582C39.5576 16.5582 39.2573 16.6715 38.9853 16.8981C38.7162 17.1248 38.515 17.4661 38.3819 17.9222ZM42.0873 20.5738L43.3876 14.3443H44.1568L42.8565 20.5738H42.0873ZM47.1271 19.9194C46.688 20.4237 46.229 20.6758 45.7503 20.6758C45.3225 20.6758 44.9656 20.5186 44.6794 20.2041C44.3962 19.8868 44.2545 19.4279 44.2545 18.8273C44.2545 18.2778 44.3664 17.7763 44.5902 17.3231C44.8168 16.867 45.0987 16.5256 45.4358 16.299C45.7758 16.0723 46.1157 15.959 46.4557 15.959C47.0166 15.959 47.4401 16.2296 47.7262 16.7706L48.2362 14.3443H49.001L47.7007 20.5738H46.9911L47.1271 19.9194ZM45.0194 18.6829C45.0194 18.9973 45.0506 19.2452 45.1129 19.4265C45.1752 19.6078 45.2814 19.7594 45.4316 19.8812C45.5817 20.0002 45.7616 20.0597 45.9712 20.0597C46.3197 20.0597 46.6356 19.8783 46.9189 19.5157C47.2985 19.0341 47.4883 18.4392 47.4883 17.731C47.4883 17.3741 47.3948 17.095 47.2078 16.8939C47.0208 16.6927 46.7857 16.5922 46.5024 16.5922C46.3183 16.5922 46.1497 16.6333 45.9967 16.7154C45.8466 16.7976 45.6965 16.9378 45.5463 17.1361C45.399 17.3316 45.2744 17.5809 45.1724 17.884C45.0704 18.1871 45.0194 18.4534 45.0194 18.6829ZM49.001 19.0313L49.7702 18.9846C49.7702 19.2055 49.8042 19.3939 49.8722 19.5497C49.9401 19.7055 50.0648 19.833 50.2461 19.9322C50.4302 20.0313 50.6441 20.0809 50.8877 20.0809C51.2277 20.0809 51.4827 20.0129 51.6526 19.8769C51.8226 19.7409 51.9076 19.5809 51.9076 19.3968C51.9076 19.2636 51.8566 19.1375 51.7546 19.0186C51.6498 18.8996 51.3934 18.7537 50.9855 18.5809C50.5804 18.4052 50.3212 18.282 50.2079 18.2112C50.018 18.095 49.875 17.9591 49.7787 17.8032C49.6823 17.6446 49.6342 17.4633 49.6342 17.2593C49.6342 16.9024 49.7758 16.5964 50.0591 16.3415C50.3424 16.0865 50.739 15.959 51.2489 15.959C51.8155 15.959 52.2461 16.0908 52.5407 16.3542C52.8382 16.6148 52.9926 16.959 53.0039 17.3868L52.2518 17.4378C52.2405 17.1658 52.1441 16.9505 51.9628 16.7919C51.7815 16.6333 51.5252 16.5539 51.1937 16.5539C50.9274 16.5539 50.7206 16.6148 50.5733 16.7367C50.426 16.8585 50.3523 16.9902 50.3523 17.1318C50.3523 17.2735 50.4161 17.3981 50.5436 17.5058C50.6285 17.5794 50.8481 17.6928 51.2022 17.8457C51.7914 18.1007 52.1626 18.3018 52.3155 18.4491C52.5592 18.6843 52.681 18.9704 52.681 19.3075C52.681 19.5313 52.6116 19.7509 52.4728 19.9662C52.3368 20.1815 52.1271 20.3543 51.8439 20.4846C51.5634 20.6121 51.2319 20.6758 50.8495 20.6758C50.3282 20.6758 49.8849 20.5469 49.5195 20.2891C49.154 20.0313 48.9812 19.6121 49.001 19.0313ZM56.8156 22.4053C56.3708 21.4308 56.1484 20.4293 56.1484 19.401C56.1484 18.7154 56.2377 18.078 56.4162 17.4888C56.5975 16.8967 56.8723 16.3117 57.2405 15.7338C57.4842 15.3485 57.8737 14.8499 58.4091 14.238H59.0083C58.6768 14.5921 58.3255 15.0907 57.9544 15.7338C57.5861 16.3769 57.3184 17.0086 57.1513 17.629C56.9842 18.2494 56.9006 18.8727 56.9006 19.4987C56.9006 20.4336 57.0635 21.4024 57.3893 22.4053H56.8156ZM58.4813 20.5738L58.6046 19.9789L61.031 17.2466C61.2038 17.0539 61.3964 16.8542 61.6089 16.6474C61.2434 16.6842 60.9814 16.7027 60.8227 16.7027H59.1442L59.2802 16.061H62.7689L62.667 16.5454L60.2193 19.2948C60.0805 19.4506 59.8737 19.6645 59.5989 19.9364C60.0267 19.9109 60.3199 19.8982 60.4785 19.8982H62.2548L62.1145 20.5738H58.4813ZM63.0876 18.8613C63.0876 17.9803 63.3469 17.2508 63.8653 16.6729C64.293 16.197 64.854 15.959 65.548 15.959C66.0919 15.959 66.5296 16.129 66.8611 16.4689C67.1954 16.8089 67.3625 17.2678 67.3625 17.8457C67.3625 18.3642 67.2577 18.8472 67.048 19.2948C66.8384 19.7395 66.5395 20.0809 66.1514 20.3189C65.7662 20.5568 65.3596 20.6758 64.9319 20.6758C64.5806 20.6758 64.2605 20.6007 63.9715 20.4506C63.6854 20.3004 63.4658 20.088 63.3129 19.8132C63.1627 19.5384 63.0876 19.2211 63.0876 18.8613ZM63.8568 18.7848C63.8568 19.2098 63.9588 19.5327 64.1627 19.7537C64.3667 19.9718 64.6259 20.0809 64.9404 20.0809C65.1047 20.0809 65.2676 20.0483 65.429 19.9832C65.5905 19.9152 65.7407 19.8132 65.8795 19.6772C66.0183 19.5412 66.1359 19.3868 66.2322 19.214C66.3313 19.0384 66.4106 18.85 66.4701 18.6489C66.558 18.3684 66.6019 18.0993 66.6019 17.8415C66.6019 17.4335 66.4985 17.1177 66.2917 16.8939C66.0877 16.6672 65.8299 16.5539 65.5183 16.5539C65.2775 16.5539 65.0579 16.612 64.8596 16.7282C64.6613 16.8415 64.4814 17.0086 64.32 17.2296C64.1613 17.4505 64.0438 17.7083 63.9673 18.003C63.8936 18.2948 63.8568 18.5554 63.8568 18.7848ZM67.7959 20.5738L68.7393 16.061H69.4362L69.2705 16.8471C69.5736 16.5384 69.8569 16.3131 70.1203 16.1715C70.3838 16.0298 70.6529 15.959 70.9277 15.959C71.2931 15.959 71.5793 16.0582 71.7861 16.2565C71.9957 16.4548 72.1005 16.7197 72.1005 17.0511C72.1005 17.2182 72.0637 17.4817 71.99 17.8415L71.4164 20.5738H70.6472L71.2464 17.714C71.3059 17.4364 71.3356 17.231 71.3356 17.0978C71.3356 16.9477 71.2832 16.8259 71.1784 16.7324C71.0764 16.6389 70.9277 16.5922 70.7322 16.5922C70.3385 16.5922 69.9872 16.7338 69.6784 17.0171C69.3724 17.3004 69.1472 17.7862 69.0027 18.4746L68.5651 20.5738H67.7959ZM75.9547 19.0398L76.7026 19.1163C76.5949 19.4874 76.347 19.8401 75.9589 20.1744C75.5737 20.5087 75.1133 20.6758 74.5779 20.6758C74.2436 20.6758 73.9362 20.5993 73.6558 20.4463C73.3782 20.2905 73.1657 20.0653 73.0184 19.7707C72.8739 19.4761 72.8017 19.1404 72.8017 18.7636C72.8017 18.2707 72.915 17.7933 73.1416 17.3316C73.3711 16.867 73.6671 16.5228 74.0297 16.299C74.3923 16.0723 74.7847 15.959 75.2068 15.959C75.7451 15.959 76.1742 16.1262 76.4944 16.4604C76.8173 16.7947 76.9788 17.2508 76.9788 17.8287C76.9788 18.0497 76.959 18.2763 76.9193 18.5086H73.5963C73.585 18.5965 73.5793 18.6758 73.5793 18.7466C73.5793 19.1687 73.6756 19.4917 73.8683 19.7155C74.0637 19.9364 74.3017 20.0469 74.5821 20.0469C74.8456 20.0469 75.1048 19.9605 75.3598 19.7877C75.6147 19.6149 75.813 19.3656 75.9547 19.0398ZM73.7195 17.9222H76.2521C76.255 17.8429 76.2564 17.7862 76.2564 17.7523C76.2564 17.367 76.1601 17.0724 75.9674 16.8684C75.7748 16.6616 75.5269 16.5582 75.2238 16.5582C74.8952 16.5582 74.5949 16.6715 74.3229 16.8981C74.0538 17.1248 73.8527 17.4661 73.7195 17.9222ZM77.5567 19.0313L78.3258 18.9846C78.3258 19.2055 78.3598 19.3939 78.4278 19.5497C78.4958 19.7055 78.6205 19.833 78.8018 19.9322C78.9859 20.0313 79.1998 20.0809 79.4434 20.0809C79.7834 20.0809 80.0383 20.0129 80.2083 19.8769C80.3783 19.7409 80.4633 19.5809 80.4633 19.3968C80.4633 19.2636 80.4123 19.1375 80.3103 19.0186C80.2055 18.8996 79.9491 18.7537 79.5411 18.5809C79.136 18.4052 78.8768 18.282 78.7635 18.2112C78.5737 18.095 78.4306 17.9591 78.3343 17.8032C78.238 17.6446 78.1899 17.4633 78.1899 17.2593C78.1899 16.9024 78.3315 16.5964 78.6148 16.3415C78.8981 16.0865 79.2947 15.959 79.8046 15.959C80.3712 15.959 80.8018 16.0908 81.0964 16.3542C81.3939 16.6148 81.5483 16.959 81.5596 17.3868L80.8075 17.4378C80.7961 17.1658 80.6998 16.9505 80.5185 16.7919C80.3372 16.6333 80.0808 16.5539 79.7494 16.5539C79.4831 16.5539 79.2763 16.6148 79.129 16.7367C78.9816 16.8585 78.908 16.9902 78.908 17.1318C78.908 17.2735 78.9717 17.3981 79.0992 17.5058C79.1842 17.5794 79.4038 17.6928 79.7579 17.8457C80.3471 18.1007 80.7182 18.3018 80.8712 18.4491C81.1148 18.6843 81.2366 18.9704 81.2366 19.3075C81.2366 19.5313 81.1672 19.7509 81.0284 19.9662C80.8924 20.1815 80.6828 20.3543 80.3995 20.4846C80.1191 20.6121 79.7876 20.6758 79.4052 20.6758C78.8839 20.6758 78.4406 20.5469 78.0751 20.2891C77.7097 20.0313 77.5369 19.6121 77.5567 19.0313ZM83.2721 14.238C83.7197 15.2126 83.9435 16.2126 83.9435 17.2381C83.9435 17.9265 83.8528 18.5653 83.6715 19.1545C83.493 19.7438 83.2197 20.3288 82.8514 20.9095C82.6049 21.2948 82.2154 21.7934 81.6828 22.4053H81.0837C81.4123 22.0483 81.7621 21.5483 82.1333 20.9053C82.5044 20.2622 82.7721 19.6319 82.9364 19.0143C83.1035 18.3939 83.1871 17.7692 83.1871 17.1403C83.1871 16.2055 83.0242 15.238 82.6984 14.238H83.2721Z"
                      fill="#E4C000"
                    />
                    <path
                      id="No"
                      d="M124.702 20.5738L126.006 14.3443H126.814L127.863 16.6814C128.183 17.3953 128.437 17.9959 128.624 18.4831C128.731 18.7664 128.856 19.1489 128.998 19.6305C129.074 19.1064 129.171 18.5653 129.287 18.0072L130.052 14.3443H130.863L129.563 20.5738H128.739L127.192 16.9746C126.917 16.34 126.703 15.7805 126.55 15.2961C126.508 15.7012 126.425 16.1984 126.304 16.7876L125.513 20.5738H124.702ZM130.991 18.8613C130.991 17.9803 131.25 17.2508 131.768 16.6729C132.196 16.197 132.757 15.959 133.451 15.959C133.995 15.959 134.433 16.129 134.764 16.4689C135.098 16.8089 135.266 17.2678 135.266 17.8457C135.266 18.3642 135.161 18.8472 134.951 19.2948C134.741 19.7395 134.443 20.0809 134.055 20.3189C133.669 20.5568 133.263 20.6758 132.835 20.6758C132.484 20.6758 132.164 20.6007 131.875 20.4506C131.588 20.3004 131.369 20.088 131.216 19.8132C131.066 19.5384 130.991 19.2211 130.991 18.8613ZM131.76 18.7848C131.76 19.2098 131.862 19.5327 132.066 19.7537C132.27 19.9718 132.529 20.0809 132.843 20.0809C133.008 20.0809 133.171 20.0483 133.332 19.9832C133.494 19.9152 133.644 19.8132 133.783 19.6772C133.921 19.5412 134.039 19.3868 134.135 19.214C134.234 19.0384 134.314 18.85 134.373 18.6489C134.461 18.3684 134.505 18.0993 134.505 17.8415C134.505 17.4335 134.402 17.1177 134.195 16.8939C133.991 16.6672 133.733 16.5539 133.421 16.5539C133.181 16.5539 132.961 16.612 132.763 16.7282C132.564 16.8415 132.385 17.0086 132.223 17.2296C132.064 17.4505 131.947 17.7083 131.87 18.003C131.797 18.2948 131.76 18.5554 131.76 18.7848Z"
                      fill="#E4C000"
                    />
                    <path
                      id="First name"
                      d="M154.391 20.4L155.691 14.1704H159.741L159.592 14.8801H156.375L155.963 16.8645H159.239L159.091 17.5742H155.814L155.224 20.4H154.391ZM160.697 15.0416L160.88 14.1704H161.644L161.462 15.0416H160.697ZM159.575 20.4L160.518 15.8872H161.288L160.344 20.4H159.575ZM161.542 20.4L162.486 15.8872H163.166L162.975 16.8093C163.207 16.4608 163.433 16.203 163.654 16.0359C163.878 15.8688 164.106 15.7852 164.339 15.7852C164.492 15.7852 164.68 15.8404 164.904 15.9509L164.589 16.6648C164.456 16.5685 164.31 16.5203 164.152 16.5203C163.882 16.5203 163.606 16.6705 163.323 16.9708C163.04 17.2711 162.817 17.8107 162.656 18.5898L162.273 20.4H161.542ZM164.513 18.8575L165.282 18.8107C165.282 19.0317 165.316 19.2201 165.384 19.3759C165.452 19.5317 165.577 19.6592 165.758 19.7583C165.942 19.8575 166.156 19.9071 166.399 19.9071C166.739 19.9071 166.994 19.8391 167.164 19.7031C167.334 19.5671 167.419 19.4071 167.419 19.2229C167.419 19.0898 167.368 18.9637 167.266 18.8447C167.162 18.7257 166.905 18.5799 166.497 18.407C166.092 18.2314 165.833 18.1082 165.72 18.0374C165.53 17.9212 165.387 17.7852 165.29 17.6294C165.194 17.4708 165.146 17.2895 165.146 17.0855C165.146 16.7286 165.288 16.4226 165.571 16.1676C165.854 15.9127 166.251 15.7852 166.761 15.7852C167.327 15.7852 167.758 15.9169 168.052 16.1804C168.35 16.441 168.504 16.7852 168.516 17.213L167.764 17.264C167.752 16.992 167.656 16.7767 167.475 16.6181C167.293 16.4594 167.037 16.3801 166.705 16.3801C166.439 16.3801 166.232 16.441 166.085 16.5628C165.938 16.6846 165.864 16.8164 165.864 16.958C165.864 17.0997 165.928 17.2243 166.055 17.332C166.14 17.4056 166.36 17.5189 166.714 17.6719C167.303 17.9269 167.674 18.128 167.827 18.2753C168.071 18.5104 168.193 18.7966 168.193 19.1337C168.193 19.3575 168.123 19.577 167.985 19.7923C167.849 20.0076 167.639 20.1804 167.356 20.3108C167.075 20.4382 166.744 20.502 166.361 20.502C165.84 20.502 165.397 20.3731 165.031 20.1153C164.666 19.8575 164.493 19.4382 164.513 18.8575ZM170.589 19.7753L170.462 20.4042C170.278 20.4524 170.099 20.4765 169.926 20.4765C169.621 20.4765 169.377 20.4014 169.196 20.2513C169.06 20.138 168.992 19.9836 168.992 19.7881C168.992 19.6889 169.028 19.4609 169.102 19.1039L169.65 16.4821H169.043L169.166 15.8872H169.773L170.007 14.7781L170.887 14.2469L170.543 15.8872H171.299L171.172 16.4821H170.419L169.897 18.9765C169.832 19.2937 169.799 19.4835 169.799 19.5459C169.799 19.6365 169.824 19.7059 169.875 19.7541C169.929 19.8023 170.016 19.8263 170.135 19.8263C170.305 19.8263 170.456 19.8093 170.589 19.7753ZM173.636 20.4L174.58 15.8872H175.276L175.111 16.6733C175.414 16.3645 175.697 16.1393 175.961 15.9977C176.224 15.856 176.493 15.7852 176.768 15.7852C177.133 15.7852 177.419 15.8843 177.626 16.0826C177.836 16.281 177.941 16.5458 177.941 16.8773C177.941 17.0444 177.904 17.3079 177.83 17.6677L177.257 20.4H176.487L177.087 17.5402C177.146 17.2626 177.176 17.0572 177.176 16.924C177.176 16.7739 177.123 16.6521 177.019 16.5586C176.917 16.4651 176.768 16.4183 176.572 16.4183C176.179 16.4183 175.827 16.56 175.519 16.8433C175.213 17.1266 174.987 17.6124 174.843 18.3008L174.405 20.4H173.636ZM181.523 19.8391C181.257 20.0685 181 20.2371 180.754 20.3448C180.507 20.4496 180.244 20.502 179.963 20.502C179.547 20.502 179.211 20.3802 178.956 20.1365C178.701 19.8901 178.574 19.5756 178.574 19.1932C178.574 18.941 178.631 18.7187 178.744 18.526C178.86 18.3306 179.013 18.1747 179.203 18.0586C179.393 17.9396 179.625 17.8546 179.9 17.8036C180.073 17.7696 180.4 17.7427 180.881 17.7229C181.366 17.7031 181.713 17.6521 181.922 17.5699C181.982 17.3603 182.012 17.1861 182.012 17.0473C182.012 16.8688 181.946 16.7286 181.816 16.6266C181.638 16.4849 181.377 16.4141 181.034 16.4141C180.711 16.4141 180.446 16.4863 180.24 16.6308C180.036 16.7725 179.887 16.975 179.793 17.2385L179.016 17.1705C179.174 16.7229 179.425 16.3801 179.768 16.1421C180.114 15.9042 180.548 15.7852 181.073 15.7852C181.631 15.7852 182.073 15.9183 182.398 16.1846C182.648 16.3829 182.772 16.6407 182.772 16.958C182.772 17.1988 182.737 17.4779 182.666 17.7951L182.415 18.917C182.336 19.2739 182.296 19.5643 182.296 19.7881C182.296 19.9297 182.327 20.1337 182.39 20.4H181.612C181.57 20.2527 181.54 20.0657 181.523 19.8391ZM181.808 18.1138C181.7 18.1563 181.584 18.1889 181.459 18.2116C181.337 18.2342 181.132 18.2583 180.843 18.2838C180.395 18.3235 180.08 18.3745 179.895 18.4368C179.711 18.4963 179.572 18.5926 179.479 18.7257C179.386 18.8589 179.339 19.0062 179.339 19.1677C179.339 19.383 179.412 19.56 179.56 19.6989C179.71 19.8377 179.922 19.9071 180.197 19.9071C180.452 19.9071 180.697 19.8405 180.932 19.7073C181.167 19.5714 181.353 19.383 181.489 19.1422C181.625 18.9014 181.731 18.5586 181.808 18.1138ZM183.32 20.4L184.264 15.8872H185.033L184.876 16.6308C185.162 16.3107 185.417 16.0897 185.641 15.9679C185.867 15.8461 186.112 15.7852 186.376 15.7852C186.656 15.7852 186.89 15.8603 187.077 16.0104C187.267 16.1577 187.391 16.3645 187.451 16.6308C187.68 16.3475 187.921 16.1365 188.173 15.9977C188.428 15.856 188.696 15.7852 188.976 15.7852C189.353 15.7852 189.635 15.8744 189.822 16.0529C190.012 16.2314 190.107 16.4821 190.107 16.805C190.107 16.9439 190.074 17.1733 190.009 17.4934L189.401 20.4H188.632L189.253 17.4169C189.306 17.1733 189.333 16.9991 189.333 16.8943C189.333 16.747 189.287 16.6308 189.193 16.5458C189.1 16.4608 188.968 16.4183 188.798 16.4183C188.568 16.4183 188.335 16.4878 188.097 16.6266C187.859 16.7654 187.673 16.9481 187.54 17.1747C187.41 17.3985 187.295 17.7441 187.196 18.2116L186.737 20.4H185.968L186.605 17.3532C186.651 17.1464 186.673 16.9991 186.673 16.9113C186.673 16.764 186.626 16.645 186.533 16.5543C186.442 16.4637 186.323 16.4183 186.176 16.4183C185.958 16.4183 185.728 16.4878 185.488 16.6266C185.25 16.7654 185.056 16.9594 184.905 17.2087C184.755 17.4552 184.632 17.8079 184.536 18.2668L184.09 20.4H183.32ZM193.889 18.866L194.636 18.9425C194.529 19.3136 194.281 19.6663 193.893 20.0006C193.508 20.3348 193.047 20.502 192.512 20.502C192.177 20.502 191.87 20.4255 191.59 20.2725C191.312 20.1167 191.1 19.8915 190.952 19.5969C190.808 19.3022 190.736 18.9665 190.736 18.5898C190.736 18.0968 190.849 17.6195 191.075 17.1577C191.305 16.6931 191.601 16.3489 191.964 16.1251C192.326 15.8985 192.719 15.7852 193.141 15.7852C193.679 15.7852 194.108 15.9523 194.428 16.2866C194.751 16.6209 194.913 17.077 194.913 17.6549C194.913 17.8759 194.893 18.1025 194.853 18.3348H191.53C191.519 18.4226 191.513 18.5019 191.513 18.5728C191.513 18.9949 191.61 19.3178 191.802 19.5416C191.998 19.7626 192.236 19.8731 192.516 19.8731C192.779 19.8731 193.039 19.7867 193.294 19.6139C193.549 19.4411 193.747 19.1918 193.889 18.866ZM191.653 17.7484H194.186C194.189 17.6691 194.19 17.6124 194.19 17.5784C194.19 17.1931 194.094 16.8985 193.901 16.6946C193.709 16.4878 193.461 16.3844 193.158 16.3844C192.829 16.3844 192.529 16.4977 192.257 16.7243C191.988 16.9509 191.787 17.2923 191.653 17.7484Z"
                      fill="#E4C000"
                    />
                    <path
                      id="Last name"
                      d="M198.04 20.4L199.341 14.1704H200.173L199.022 19.6946H202.256L202.107 20.4H198.04ZM205.868 19.8391C205.601 20.0685 205.345 20.2371 205.098 20.3448C204.852 20.4496 204.589 20.502 204.308 20.502C203.892 20.502 203.556 20.3802 203.301 20.1365C203.046 19.8901 202.919 19.5756 202.919 19.1932C202.919 18.941 202.975 18.7187 203.089 18.526C203.205 18.3306 203.358 18.1747 203.547 18.0586C203.737 17.9396 203.97 17.8546 204.244 17.8036C204.417 17.7696 204.744 17.7427 205.226 17.7229C205.71 17.7031 206.057 17.6521 206.267 17.5699C206.327 17.3603 206.356 17.1861 206.356 17.0473C206.356 16.8688 206.291 16.7286 206.161 16.6266C205.982 16.4849 205.722 16.4141 205.379 16.4141C205.056 16.4141 204.791 16.4863 204.584 16.6308C204.38 16.7725 204.232 16.975 204.138 17.2385L203.36 17.1705C203.519 16.7229 203.77 16.3801 204.113 16.1421C204.458 15.9042 204.893 15.7852 205.417 15.7852C205.975 15.7852 206.417 15.9183 206.743 16.1846C206.992 16.3829 207.117 16.6407 207.117 16.958C207.117 17.1988 207.081 17.4779 207.011 17.7951L206.76 18.917C206.681 19.2739 206.641 19.5643 206.641 19.7881C206.641 19.9297 206.672 20.1337 206.734 20.4H205.957C205.914 20.2527 205.885 20.0657 205.868 19.8391ZM206.152 18.1138C206.045 18.1563 205.928 18.1889 205.804 18.2116C205.682 18.2342 205.477 18.2583 205.188 18.2838C204.74 18.3235 204.424 18.3745 204.24 18.4368C204.056 18.4963 203.917 18.5926 203.824 18.7257C203.73 18.8589 203.683 19.0062 203.683 19.1677C203.683 19.383 203.757 19.56 203.904 19.6989C204.055 19.8377 204.267 19.9071 204.542 19.9071C204.797 19.9071 205.042 19.8405 205.277 19.7073C205.512 19.5714 205.698 19.383 205.834 19.1422C205.97 18.9014 206.076 18.5586 206.152 18.1138ZM207.742 18.8575L208.511 18.8107C208.511 19.0317 208.545 19.2201 208.613 19.3759C208.681 19.5317 208.805 19.6592 208.987 19.7583C209.171 19.8575 209.385 19.9071 209.628 19.9071C209.968 19.9071 210.223 19.8391 210.393 19.7031C210.563 19.5671 210.648 19.4071 210.648 19.2229C210.648 19.0898 210.597 18.9637 210.495 18.8447C210.39 18.7257 210.134 18.5799 209.726 18.407C209.321 18.2314 209.062 18.1082 208.948 18.0374C208.759 17.9212 208.616 17.7852 208.519 17.6294C208.423 17.4708 208.375 17.2895 208.375 17.0855C208.375 16.7286 208.516 16.4226 208.8 16.1676C209.083 15.9127 209.48 15.7852 209.989 15.7852C210.556 15.7852 210.987 15.9169 211.281 16.1804C211.579 16.441 211.733 16.7852 211.744 17.213L210.992 17.264C210.981 16.992 210.885 16.7767 210.703 16.6181C210.522 16.4594 210.266 16.3801 209.934 16.3801C209.668 16.3801 209.461 16.441 209.314 16.5628C209.167 16.6846 209.093 16.8164 209.093 16.958C209.093 17.0997 209.157 17.2243 209.284 17.332C209.369 17.4056 209.589 17.5189 209.943 17.6719C210.532 17.9269 210.903 18.128 211.056 18.2753C211.3 18.5104 211.421 18.7966 211.421 19.1337C211.421 19.3575 211.352 19.577 211.213 19.7923C211.077 20.0076 210.868 20.1804 210.584 20.3108C210.304 20.4382 209.972 20.502 209.59 20.502C209.069 20.502 208.625 20.3731 208.26 20.1153C207.895 19.8575 207.722 19.4382 207.742 18.8575ZM213.818 19.7753L213.691 20.4042C213.507 20.4524 213.328 20.4765 213.155 20.4765C212.849 20.4765 212.606 20.4014 212.424 20.2513C212.288 20.138 212.22 19.9836 212.22 19.7881C212.22 19.6889 212.257 19.4609 212.331 19.1039L212.879 16.4821H212.271L212.395 15.8872H213.002L213.236 14.7781L214.116 14.2469L213.771 15.8872H214.528L214.4 16.4821H213.648L213.125 18.9765C213.06 19.2937 213.028 19.4835 213.028 19.5459C213.028 19.6365 213.053 19.7059 213.104 19.7541C213.158 19.8023 213.244 19.8263 213.363 19.8263C213.533 19.8263 213.685 19.8093 213.818 19.7753ZM216.865 20.4L217.808 15.8872H218.505L218.339 16.6733C218.643 16.3645 218.926 16.1393 219.189 15.9977C219.453 15.856 219.722 15.7852 219.997 15.7852C220.362 15.7852 220.648 15.8843 220.855 16.0826C221.065 16.281 221.17 16.5458 221.17 16.8773C221.17 17.0444 221.133 17.3079 221.059 17.6677L220.485 20.4H219.716L220.315 17.5402C220.375 17.2626 220.405 17.0572 220.405 16.924C220.405 16.7739 220.352 16.6521 220.247 16.5586C220.145 16.4651 219.997 16.4183 219.801 16.4183C219.407 16.4183 219.056 16.56 218.747 16.8433C218.441 17.1266 218.216 17.6124 218.072 18.3008L217.634 20.4H216.865ZM224.752 19.8391C224.485 20.0685 224.229 20.2371 223.983 20.3448C223.736 20.4496 223.473 20.502 223.192 20.502C222.776 20.502 222.44 20.3802 222.185 20.1365C221.93 19.8901 221.803 19.5756 221.803 19.1932C221.803 18.941 221.859 18.7187 221.973 18.526C222.089 18.3306 222.242 18.1747 222.432 18.0586C222.621 17.9396 222.854 17.8546 223.128 17.8036C223.301 17.7696 223.628 17.7427 224.11 17.7229C224.594 17.7031 224.942 17.6521 225.151 17.5699C225.211 17.3603 225.24 17.1861 225.24 17.0473C225.24 16.8688 225.175 16.7286 225.045 16.6266C224.866 16.4849 224.606 16.4141 224.263 16.4141C223.94 16.4141 223.675 16.4863 223.468 16.6308C223.264 16.7725 223.116 16.975 223.022 17.2385L222.245 17.1705C222.403 16.7229 222.654 16.3801 222.997 16.1421C223.342 15.9042 223.777 15.7852 224.301 15.7852C224.859 15.7852 225.301 15.9183 225.627 16.1846C225.876 16.3829 226.001 16.6407 226.001 16.958C226.001 17.1988 225.966 17.4779 225.895 17.7951L225.644 18.917C225.565 19.2739 225.525 19.5643 225.525 19.7881C225.525 19.9297 225.556 20.1337 225.619 20.4H224.841C224.798 20.2527 224.769 20.0657 224.752 19.8391ZM225.036 18.1138C224.929 18.1563 224.813 18.1889 224.688 18.2116C224.566 18.2342 224.361 18.2583 224.072 18.2838C223.624 18.3235 223.308 18.3745 223.124 18.4368C222.94 18.4963 222.801 18.5926 222.708 18.7257C222.614 18.8589 222.568 19.0062 222.568 19.1677C222.568 19.383 222.641 19.56 222.789 19.6989C222.939 19.8377 223.151 19.9071 223.426 19.9071C223.681 19.9071 223.926 19.8405 224.161 19.7073C224.396 19.5714 224.582 19.383 224.718 19.1422C224.854 18.9014 224.96 18.5586 225.036 18.1138ZM226.549 20.4L227.493 15.8872H228.262L228.104 16.6308C228.391 16.3107 228.646 16.0897 228.869 15.9679C229.096 15.8461 229.341 15.7852 229.604 15.7852C229.885 15.7852 230.119 15.8603 230.306 16.0104C230.495 16.1577 230.62 16.3645 230.68 16.6308C230.909 16.3475 231.15 16.1365 231.402 15.9977C231.657 15.856 231.925 15.7852 232.205 15.7852C232.582 15.7852 232.864 15.8744 233.051 16.0529C233.241 16.2314 233.335 16.4821 233.335 16.805C233.335 16.9439 233.303 17.1733 233.238 17.4934L232.63 20.4H231.861L232.481 17.4169C232.535 17.1733 232.562 16.9991 232.562 16.8943C232.562 16.747 232.515 16.6308 232.422 16.5458C232.328 16.4608 232.197 16.4183 232.027 16.4183C231.797 16.4183 231.563 16.4878 231.325 16.6266C231.088 16.7654 230.902 16.9481 230.769 17.1747C230.638 17.3985 230.524 17.7441 230.425 18.2116L229.966 20.4H229.197L229.834 17.3532C229.879 17.1464 229.902 16.9991 229.902 16.9113C229.902 16.764 229.855 16.645 229.762 16.5543C229.671 16.4637 229.552 16.4183 229.405 16.4183C229.187 16.4183 228.957 16.4878 228.716 16.6266C228.478 16.7654 228.284 16.9594 228.134 17.2087C227.984 17.4552 227.861 17.8079 227.765 18.2668L227.318 20.4H226.549ZM237.117 18.866L237.865 18.9425C237.758 19.3136 237.51 19.6663 237.122 20.0006C236.736 20.3348 236.276 20.502 235.741 20.502C235.406 20.502 235.099 20.4255 234.818 20.2725C234.541 20.1167 234.328 19.8915 234.181 19.5969C234.037 19.3022 233.964 18.9665 233.964 18.5898C233.964 18.0968 234.078 17.6195 234.304 17.1577C234.534 16.6931 234.83 16.3489 235.192 16.1251C235.555 15.8985 235.947 15.7852 236.369 15.7852C236.908 15.7852 237.337 15.9523 237.657 16.2866C237.98 16.6209 238.141 17.077 238.141 17.6549C238.141 17.8759 238.122 18.1025 238.082 18.3348H234.759C234.748 18.4226 234.742 18.5019 234.742 18.5728C234.742 18.9949 234.838 19.3178 235.031 19.5416C235.226 19.7626 235.464 19.8731 235.745 19.8731C236.008 19.8731 236.267 19.7867 236.522 19.6139C236.777 19.4411 236.976 19.1918 237.117 18.866ZM234.882 17.7484H237.415C237.418 17.6691 237.419 17.6124 237.419 17.5784C237.419 17.1931 237.323 16.8985 237.13 16.6946C236.937 16.4878 236.69 16.3844 236.386 16.3844C236.058 16.3844 235.758 16.4977 235.486 16.7243C235.216 16.9509 235.015 17.2923 234.882 17.7484Z"
                      fill="#E4C000"
                    />
                    <path
                      id="Age"
                      d="M255.704 20.4L259.235 14.1704H260.217L261.245 20.4H260.438L260.136 18.6068H257.616L256.618 20.4H255.704ZM257.973 17.9651H260.034L259.792 16.4014C259.699 15.7809 259.641 15.2639 259.618 14.8503C259.476 15.2073 259.269 15.6308 258.997 16.1209L257.973 17.9651ZM261.93 20.8079L262.707 20.8802C262.701 21.0558 262.723 21.1875 262.771 21.2754C262.819 21.3632 262.896 21.4312 263 21.4793C263.139 21.5417 263.319 21.5728 263.54 21.5728C264.005 21.5728 264.339 21.4524 264.543 21.2116C264.676 21.0501 264.799 20.6989 264.913 20.1578L264.989 19.7923C264.59 20.1974 264.165 20.4 263.714 20.4C263.258 20.4 262.876 20.2329 262.567 19.8986C262.261 19.5615 262.108 19.0855 262.108 18.4708C262.108 17.9637 262.228 17.4977 262.469 17.0727C262.713 16.6478 263.002 16.3277 263.336 16.1124C263.67 15.8943 264.015 15.7852 264.369 15.7852C264.961 15.7852 265.417 16.0657 265.737 16.6266L265.89 15.8872H266.595L265.686 20.2428C265.587 20.7215 265.456 21.0941 265.295 21.3603C265.134 21.6295 264.908 21.8377 264.619 21.985C264.333 22.1323 264.002 22.206 263.625 22.206C263.262 22.206 262.949 22.1592 262.686 22.0657C262.425 21.9723 262.23 21.8349 262.099 21.6536C261.972 21.4751 261.908 21.2697 261.908 21.0374C261.908 20.9666 261.915 20.8901 261.93 20.8079ZM262.89 18.4028C262.89 18.7116 262.92 18.9439 262.979 19.0997C263.064 19.3178 263.184 19.485 263.34 19.6011C263.499 19.7144 263.675 19.7711 263.867 19.7711C264.119 19.7711 264.37 19.6833 264.619 19.5076C264.869 19.3292 265.07 19.0544 265.223 18.6833C265.379 18.3121 265.456 17.958 265.456 17.6209C265.456 17.2498 265.353 16.9552 265.146 16.7371C264.942 16.5161 264.689 16.4056 264.386 16.4056C264.199 16.4056 264.017 16.4566 263.842 16.5586C263.666 16.6577 263.502 16.8107 263.349 17.0175C263.199 17.2215 263.084 17.4665 263.005 17.7526C262.928 18.0388 262.89 18.2555 262.89 18.4028ZM270.131 18.866L270.879 18.9425C270.771 19.3136 270.523 19.6663 270.135 20.0006C269.75 20.3348 269.289 20.502 268.754 20.502C268.42 20.502 268.112 20.4255 267.832 20.2725C267.554 20.1167 267.342 19.8915 267.194 19.5969C267.05 19.3022 266.978 18.9665 266.978 18.5898C266.978 18.0968 267.091 17.6195 267.318 17.1577C267.547 16.6931 267.843 16.3489 268.206 16.1251C268.568 15.8985 268.961 15.7852 269.383 15.7852C269.921 15.7852 270.35 15.9523 270.67 16.2866C270.993 16.6209 271.155 17.077 271.155 17.6549C271.155 17.8759 271.135 18.1025 271.095 18.3348H267.772C267.761 18.4226 267.755 18.5019 267.755 18.5728C267.755 18.9949 267.852 19.3178 268.044 19.5416C268.24 19.7626 268.478 19.8731 268.758 19.8731C269.022 19.8731 269.281 19.7867 269.536 19.6139C269.791 19.4411 269.989 19.1918 270.131 18.866ZM267.896 17.7484H270.428C270.431 17.6691 270.432 17.6124 270.432 17.5784C270.432 17.1931 270.336 16.8985 270.144 16.6946C269.951 16.4878 269.703 16.3844 269.4 16.3844C269.071 16.3844 268.771 16.4977 268.499 16.7243C268.23 16.9509 268.029 17.2923 267.896 17.7484Z"
                      fill="#E4C000"
                    />
                    <path
                      id="10"
                      d="M129.594 46.615H128.829V41.7409C128.645 41.9166 128.403 42.0922 128.102 42.2679C127.805 42.4435 127.537 42.5752 127.299 42.6631V41.9237C127.727 41.7225 128.101 41.4789 128.421 41.1928C128.741 40.9067 128.968 40.629 129.101 40.3599H129.594V46.615ZM131.557 43.5427C131.557 42.8061 131.632 42.214 131.782 41.7664C131.935 41.316 132.16 40.969 132.458 40.7254C132.758 40.4817 133.135 40.3599 133.588 40.3599C133.922 40.3599 134.216 40.4279 134.468 40.5639C134.72 40.697 134.928 40.8911 135.092 41.146C135.257 41.3982 135.386 41.707 135.479 42.0724C135.573 42.435 135.619 42.9251 135.619 43.5427C135.619 44.2736 135.544 44.8642 135.394 45.3147C135.244 45.7623 135.019 46.1093 134.719 46.3557C134.421 46.5994 134.044 46.7212 133.588 46.7212C132.988 46.7212 132.516 46.5059 132.173 46.0753C131.762 45.5569 131.557 44.7127 131.557 43.5427ZM132.343 43.5427C132.343 44.5654 132.462 45.2467 132.7 45.5866C132.941 45.9237 133.237 46.0923 133.588 46.0923C133.939 46.0923 134.234 45.9223 134.472 45.5824C134.713 45.2424 134.833 44.5625 134.833 43.5427C134.833 42.5172 134.713 41.8359 134.472 41.4987C134.234 41.1616 133.937 40.9931 133.58 40.9931C133.228 40.9931 132.948 41.1418 132.738 41.4392C132.475 41.8189 132.343 42.52 132.343 43.5427Z"
                      fill="black"
                    />
                    <path
                      id="15"
                      d="M172.875 46.615H172.11V41.7409C171.926 41.9166 171.684 42.0922 171.384 42.2679C171.086 42.4435 170.818 42.5752 170.58 42.6631V41.9237C171.008 41.7225 171.382 41.4789 171.702 41.1928C172.022 40.9067 172.249 40.629 172.382 40.3599H172.875V46.615ZM174.838 44.9832L175.641 44.9152C175.701 45.3062 175.838 45.6008 176.054 45.7991C176.272 45.9946 176.534 46.0923 176.84 46.0923C177.208 46.0923 177.52 45.9535 177.775 45.6759C178.03 45.3982 178.157 45.03 178.157 44.571C178.157 44.1348 178.034 43.7906 177.787 43.5384C177.544 43.2863 177.224 43.1602 176.827 43.1602C176.58 43.1602 176.358 43.2169 176.16 43.3302C175.961 43.4407 175.806 43.5852 175.692 43.7636L174.974 43.6702L175.578 40.4704H178.675V41.2013H176.19L175.854 42.8755C176.228 42.6149 176.62 42.4846 177.031 42.4846C177.575 42.4846 178.034 42.673 178.408 43.0498C178.782 43.4265 178.969 43.911 178.969 44.503C178.969 45.0668 178.804 45.554 178.476 45.9648C178.076 46.4691 177.531 46.7212 176.84 46.7212C176.273 46.7212 175.81 46.5626 175.45 46.2453C175.093 45.928 174.889 45.5073 174.838 44.9832Z"
                      fill="black"
                    />
                    <path
                      id="15_2"
                      d="M216.156 46.615H215.391V41.7409C215.207 41.9166 214.965 42.0922 214.665 42.2679C214.367 42.4435 214.099 42.5752 213.862 42.6631V41.9237C214.289 41.7225 214.663 41.4789 214.983 41.1928C215.303 40.9067 215.53 40.629 215.663 40.3599H216.156V46.615ZM218.119 44.9832L218.922 44.9152C218.982 45.3062 219.119 45.6008 219.335 45.7991C219.553 45.9946 219.815 46.0923 220.121 46.0923C220.489 46.0923 220.801 45.9535 221.056 45.6759C221.311 45.3982 221.438 45.03 221.438 44.571C221.438 44.1348 221.315 43.7906 221.068 43.5384C220.825 43.2863 220.505 43.1602 220.108 43.1602C219.862 43.1602 219.639 43.2169 219.441 43.3302C219.243 43.4407 219.087 43.5852 218.973 43.7636L218.255 43.6702L218.859 40.4704H221.957V41.2013H219.471L219.135 42.8755C219.509 42.6149 219.901 42.4846 220.312 42.4846C220.856 42.4846 221.315 42.673 221.689 43.0498C222.063 43.4265 222.25 43.911 222.25 44.503C222.25 45.0668 222.085 45.554 221.757 45.9648C221.357 46.4691 220.812 46.7212 220.121 46.7212C219.554 46.7212 219.091 46.5626 218.731 46.2453C218.374 45.928 218.17 45.5073 218.119 44.9832Z"
                      fill="black"
                    />
                    <path
                      id="2"
                      d="M262.998 45.8798V46.615H258.881C258.875 46.4308 258.905 46.2538 258.97 46.0838C259.075 45.8033 259.242 45.5271 259.471 45.2552C259.704 44.9832 260.038 44.6688 260.474 44.3118C261.151 43.7566 261.609 43.3175 261.847 42.9945C262.085 42.6687 262.204 42.3614 262.204 42.0724C262.204 41.7693 262.095 41.5143 261.876 41.3075C261.661 41.0979 261.379 40.9931 261.031 40.9931C260.662 40.9931 260.368 41.1035 260.147 41.3245C259.926 41.5455 259.814 41.8514 259.811 42.2424L259.025 42.1616C259.079 41.5752 259.281 41.129 259.633 40.8231C259.984 40.5143 260.456 40.3599 261.048 40.3599C261.646 40.3599 262.119 40.5256 262.467 40.8571C262.816 41.1885 262.99 41.5993 262.99 42.0894C262.99 42.3387 262.939 42.5837 262.837 42.8245C262.735 43.0653 262.565 43.3189 262.327 43.5852C262.092 43.8515 261.699 44.2169 261.15 44.6815C260.691 45.0668 260.396 45.3288 260.266 45.4676C260.136 45.6036 260.028 45.741 259.943 45.8798H262.998Z"
                      fill="black"
                    />
                  </svg>
                  <span>Total size of this record: 42 character</span>
                </div>
                <ul>
                  <li>
                    <strong>Fixed-length record:</strong> is a record where each
                    field has a fixed length (always occupies the same amount of
                    bytes). This means that all records in the same file are the
                    same size (constant size).
                  </li>
                  <li>
                    <strong>Variable length record:</strong> is a record where
                    each field has its own length. This means that records in
                    the same file can have different sizes.
                  </li>
                  <li>
                    <strong>Indefinite length record:</strong> is a record where
                    the size can be extremely variable and potentially
                    unlimited. A common example of this type of recording is the
                    storage of multimedia content (Images, audio...) in a file,
                    where the length of each element can vary considerably.
                  </li>
                </ul>
              </Fragment>
            ),
            subChapterVisualisation: (
              <VisualisationComponent
                title={"Record types"}
                animationData={recordTypes}
                description={"Fixed-length and variable length records example"}
              />
            ),
          },
          {
            id: 177,
            title: "7) Static file and dynamic file",
            subChapterContent: (
              <ul>
                <li>
                  <strong>Static file:</strong>a static file is generally used
                  to store data that does not do not require frequent updates or
                  data that does not change often. For example: an executable
                  binary file (.exe on Windows).
                </li>
                <li>
                  <strong>Dynamic file:</strong>a dynamic file is often used to
                  store data constantly changing, such as database files or
                  temporary files generated by running applications.
                </li>
              </ul>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 188,
            title: "8) File activity",
            subChapterContent: (
              <div>
                The activity of a file is defined by the following
                characteristics:
                <ul>
                  <li>-Consultation rate</li>
                  <li>-Renewal rate</li>
                  <li>-File stability</li>
                </ul>
                <strong>Consultation rate: </strong>
                <br /> the consultation rate designates the ratio between the
                number of records consulted (or modified) and the total number
                of records in the file during a certain period. <br />
                <em>
                  CR = Number of records viewed (or modified) / Total number of
                  records
                </em>
                <br /> Thus, we distinguish between: <br />
                <em>The basic consultation</em>
                rate: relating to a single treatment (execution of a program).
                <br />
                <em>The periodic consultation rate:</em> relating to a given
                period of time.
                <br /> Example, the annual consultation rate.
                <br />
                <strong> Renewal rate:</strong> The renewal rate represents the
                proportion of new records added to the total number of existing
                records in the file during a given period. <br />
                <em>
                  Renewal rate = (Number of new records added) / (Total number
                  of records at the start of the period)
                </em>
                <br /> <strong>File Stability:</strong>
                File stability is relative to a given period. A file is said to
                be stable for a period if the number of records created is
                approximately equal to the number of records deleted.
              </div>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 199,
            title: "9) File typology",
            subChapterContent: (
              <div>
                We can distinguish several types of files according to:
                <ul>
                  <li>-The nature of the information it contains</li>
                  <li>-The type of media used for its storage</li>
                  <li>-Organization of information</li>
                  <li>-Lifetime</li>
                </ul>
                <h4>
                  <strong>
                    9.1.According to the nature of the information:
                  </strong>
                </h4>
                A file can contain two types of information: data or programs,
                and depending on the case, we speak of a data file or a program
                file.
                <h4>
                  <strong>
                    9.2.According to the type of media used for storage:
                  </strong>
                </h4>
                Although the content of a file remains the same regardless of
                the medium used to store it, certain characteristics of the file
                are closely linked to the nature of this medium, and in
                particular the mode of access to the data it contains. For
                example, for a file stored on a magnetic tape, only sequential
                access can be practiced, whereas on a magnetic disk, access can
                be sequential, but also direct. This fact is mainly due to the
                manufacturing technologies used for storage units.
                <br />
                These technologies will be studied in chapter 2.
                <h4>
                  <strong>
                    9.3.According to the organization of information:
                  </strong>
                </h4>
                The organization adopted for a file is one of its most important
                characteristics, since it allows you to define the way of
                accessing the information it contains. We can distinguish three
                main types:
                <ul>
                  <li>Sequential organization</li>
                  <li>Indexed sequential organization</li>
                  <li>Random (or direct) organization</li>
                </ul>
                These organizational methods will be studied in chapter 3.
                <h4>
                  <strong>9.4.According to the lifetime:</strong>
                </h4>
                Files can be classified into five types:
                <ul>
                  <li>
                    -<strong>Permanent files: </strong>
                    is a file whose information is of vital importance within
                    the application for which it was designed. Its content does
                    not undergo frequent modifications; it must be constantly
                    checked, given its importance. To avoid the risk of loss of
                    information, it is useful to make backup copies.
                  </li>
                  <li>
                    -<strong>Movement files: </strong>
                    the movement file is used to update a permanent file. He is
                    characterized by a short lifespan. At the end of treatment,
                    it is no longer useful.
                  </li>
                  <li>
                    -<strong>Maneuver files: </strong>
                    the maneuver file finds its reason for being when there is
                    not enough of space in central memory to contain all the
                    data necessary for a certain processing. Its lifespan is
                    limited by that of the treatment that created it.
                  </li>
                  <li>
                    -<strong>Intermediate files: </strong>
                    contains results of a given treatment to be used either
                    during the same treatment or by other subsequent treatments.
                    It allows the exchange of data between programs, unlike the
                    maneuver file which only communicates its data to the same
                    processing it generated. In addition, the lifespan of an
                    intermediate file is not limited by that of the processing
                    that created it, in order to allow other processing to use
                    it.
                  </li>
                  <li>
                    -<strong>Archive and historical files: </strong>
                    allows you to keep track of the treatments carried out
                    during a given period. The difference between an archive
                    file and a historical file essentially lies in the
                    periodicity. A historical file is periodic (at the end of
                    each week, each month or half-year, etc).
                    <br />
                    Example: At the end of each semester, the results obtained
                    by the students are stored in a 'Result_S' file. This file
                    is a historical file since student results are recorded in
                    this file periodically (at the end of each semester). The
                    'Result_S' file will contain the students' semester results.
                    If, for the development of the 'Result_S' file, we had used
                    intermediate files: Result_S1, Result_S2, Result_S3 and we
                    had kept them, they would then be archive files.
                  </li>
                </ul>
              </div>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 210,
            title: "10) Basic File Operations",
            subChapterContent: (
              <div>
                The basic operations that can be performed on a file are:
                <ul>
                  <li>
                    -<strong>Create a file:</strong>
                    Create its structure, that is to say, define the different
                    fields, as well as the length of your articles. Enter the
                    items from the file and store them on a physical medium
                    (magnetic tape, disk, etc.).
                  </li>
                  <li>
                    -<strong>Delete a file:</strong>
                    <li>
                      -Logical deletion involves marking the file in a way that
                      makes it transparent, in reality it still exists on the
                      media.
                    </li>
                    <li>
                      -Physical deletion erases the file permanently. The space
                      previously occupied by the file will be reclaimed.
                    </li>
                  </li>
                  <li>
                    -<strong>Update a file:</strong>
                    The update includes the following three treatments:
                    <li>-Addition: adding new records to the file.</li>
                    <li>
                      -Modification: changing the content of one or more
                      records.
                    </li>
                    <li>
                      -Deletion: removing one or more records from the file.
                    </li>
                    The update is generally carried out on a permanent file, via
                    a movement file.
                  </li>
                  <li>
                    -<strong>File reunion:</strong>
                    Several sender files give rise to a new file.
                    <br />
                    Noticed : During the meeting, changes can be made to make
                    the new file easier to handle. A field can be split into
                    several fields, or the opposite, combine several fields to
                    form one. But, the content of the recording remains the
                    same.
                    <br />
                    Example : Consider several sender files containing
                    information on a company's employees. Each transmitter file
                    contains the following data:
                    <br />
                    .Number
                    <br />
                    .Name
                    <br />
                    .First name
                    <br />
                    .Address (for example: Rue de Rabia, 1600 Algiers)
                    <br /> The company wants to create a new file to perform
                    geographic analyses, so it must divide the 'Address' field
                    into 'Street', 'Postal Code' and 'City' subfields as
                    follows:
                    <br />
                    .Number
                    <br />
                    .Name
                    <br />
                    .First name
                    <br />
                    .Street: Rabia
                    <br />
                    .Postcode: 1600
                    <br />
                    .City: Algiers
                  </li>
                  <li>
                    <strong>The bursting :</strong>
                    This is the opposite operation of the reunion. A sender file
                    gives rise to several receiver files.
                    <br />
                    Noticed : Here, again, changes can be made to the file
                    structure but not to the content.
                  </li>
                  <li>
                    <strong>Sile sorting:</strong>
                    Sorting a file means sorting its records in ascending or
                    descending order by the value of one or more attributes
                    called "sort arguments".
                  </li>
                  <li>
                    <strong>Files fusion:</strong>
                    It consists of grouping the recordings of two or more files
                    into a single file.
                    <br />
                    Noticed : The files to be merged must have the same
                    structure. Therefore, the resulting file will have the same
                    structure as the files that gave rise to it.
                  </li>
                  <li>
                    <strong>Extraction :</strong>
                    This processing consists of extracting or copying recordings
                    or parts of recordings onto another medium according to a
                    given criterion.
                  </li>
                  <li>
                    <strong>The copy:</strong>
                    Copying a file amounts to duplicating its contents on a
                    medium. This treatment may be justified by different reason:
                    <li>
                      -Change the organization of the file to adapt it to
                      processing.
                    </li>
                    <li>-Allow faster access time.</li>
                    <li>
                      -Guarantee greater reliability to avoid loss of
                      information.
                    </li>
                    <li>-Minimize storage cost.</li>
                  </li>
                </ul>
              </div>
            ),
            subChapterVisualisation: null,
          },
          {
            id: 221,
            title: "11) Operations on records",
            subChapterContent: (
              <div>
                After creating the file, several operations can be performed on
                its records, namely:
                <ul>
                  <li>
                    <strong>Creation: </strong>
                    which consists of entering a new record.
                  </li>
                  <li>
                    <strong>Deletion: </strong>
                    which amounts to erasing one or more records. If all records
                    are deleted, we obtain an empty file.
                  </li>
                  <li>
                    <strong>Modification: </strong>
                    consists of changing the values of one or more fields.
                  </li>
                  <li>
                    <strong>Consultation: </strong>
                    which amounts to reading the value of one or more fields of
                    a record.
                  </li>
                </ul>
              </div>
            ),
          },
        ],
      },

        // TODO Oussama
            {
              chapterId: 2,
              title: "Media concepts",
              chapterDescription:
               "The central memory of the computer is a volatile memory, that is to say that its contents are erased when the power supply to the computer is interrupted. However, the programs and data stored in central memory and primarily the system code and data operating conditions need to be preserved beyond this cutoff. The commonly used solution to deal with this problem consists of storing the data on non-volatile mass media, such as such as the hard disk, the floppy disk, the CD-ROM or even the magnetic tape, in units called files.",
              
               subChapter: [
                {
                  id: 221,
                  title: "1) Introduction",
                  subChapterContent: (
                    <p>
                      The central memory of the computer is a volatile memory, that is to say that its contents are erased
                      when the power supply to the computer is interrupted. However, the programs and
                      data stored in central memory and primarily the system code and data
                      operating conditions need to be preserved beyond this cutoff. The commonly used solution
                      to deal with this problem consists of storing the data on non-volatile mass media, such as
                      such as the hard disk, the floppy disk, the CD-ROM or even the magnetic tape, in units called
                      files.
                      <br />{" "}
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  id: 222,
                  title: "2) Primary Memory vs. Secondary Memory",
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>A. Volatility:</strong>
                      </h4>{" "}
                      RAM: RAM has a limited capacity, usually measured in GB. The average RAM capacity in personal computers generally ranges from 4 GB to 32 GB or more, depending on the needs and type of computer.
                      RAM is much faster than secondary memory. 
                      It is designed for quick access to data currently in use.
                      <br />
                      <h4>
                        <strong>B. Capacity:</strong>
                      </h4>{" "}
                      - RAM: RAM is volatile memory, which means that the data it contains is
                      temporary and are erased when the computer is turned off or restarted. She serves
                      primarily to store data in use by the processor and programs
                      running.<br />
                      - Secondary memory: Secondary memory is non-volatile, which means that the data
                      stored there remain intact even when the computer is turned off. This is the place where are
                      stored long-term data, such as files and programs.
                      <br />
                      <h4>
                        <strong>C. Secondary memory:</strong>
                      </h4>{" "}
                      Secondary memory has a much larger capacity than RAM, 
                      ranging from 128 GB to several TB for common hard drives. 
                      It is used to store large amounts of data permanently.
                      <br />
                      <h4>
                      <strong>D. Access Speed:</strong>
                      </h4>{" "}
                      - RAM: RAM offers very fast access to data, measured in nanoseconds (ns), which allows the processor almost instantaneous access to data.
                      -Secondary memory: Secondary memory is slower than RAM in terms of data access, with access times measured in milliseconds (ms) for hard drives.
                      Data stored in secondary memory needs some time to be transferred to RAM before being accessible to the processor.
                      <br />
                      <h4>
                      <strong>E. Cost:</strong>
                      </h4>{" "}
                      - RAM: RAM is more expensive per unit of storage than secondary memory. 
                      The cost of RAM varies depending on capacity, speed, and type of RAM (DDR3, DDR4, DDR5, etc.).
                      - Secondary memory: Secondary memory is generally cheaper in terms of cost per GB than RAM, making it a more economical way to store large amounts of data permanently.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  id: 223,
                  title: "3) Magnetic storage media",
                  subChapterContent: (
                    <p>
                      The recording on a magnetic medium, whether it's tape or disk, 
                      relies on the same principle: the magnetization of a surface covered with a magnetizable substance.
                    </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  // TO DO Bouhamza
                  id: 224,
                  title: "4) Principle of magnetic recording",
                  subChapterContent: (
                    <p>
                    Magnetic media (Fig. 1) consist of a thin layer of magnetizable material, usually iron oxide, 
                    deposited on a flexible (tape) or rigid (disk) support. The magnetic layer is composed of magnetic microcells (small magnets)
                    that can be magnetized by an electric current.
                    Reading and writing operations are performed using a head consisting of the air gap of a magnet with an electrical 
                    coil wound around it. The read/write head magnetizes the surface of the medium in one direction or the other. The direction 
                    of magnetization indicates the value of the recorded bit (0/1).
                    </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  subChapterContent: (
                    <div>
                    <h4>
                      <strong>4.1.Writing:</strong>
                    </h4>
                    Recording (writing) information onto the magnetic medium involves passing an electric current through the coil that constitutes the head.
                    The passage of current through the coil generates a localized magnetic field, and the area (the cell) of the magnetic surface in front of
                    the air gap becomes magnetized. This magnetization orients the particles (microcells) of the material.
                    The orientation of the particles depends on the direction of the electric current. 
                    This is how writing is performed, with the orientation of the particles defining the value to be assigned to the magnetized 
                    </div>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  subChapterContent: (
                    <div>
                    <h4>
                      <strong>4.2.Reading</strong>
                    </h4>
                    To read the stored information, a read head is used to detect the magnetic changes on the medium. When this head passes over 
                    the magnetized areas (cells), an electric current is induced in the coil. The direction of the induced electric current depends 
                    on the type of magnetization. Thus, based on the direction of the electric current, it is possible to determine the value of the information 
                    that has just been read (0 or 1). 
                    </div>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  id: 225,
                  title: "5) Recording density",
                  subChapterContent: (
                    <div>
                    In general, recording density represents the amount of information that can be stored per unit of surface area 
                    (or length) on the magnetic medium. In practice, it is measured in Bits Per Square Inch (bpi). In other words, 
                    it is equal to the number of bits stored per inch along a recording track.
                    </div>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter
                },
                {
                  id: 226,
                  title: "6) Recording modes",
                  subChapterContent: (
                    <p>
                     <h4>
                        <strong>6.1.RZ mode (Return to Zero) :</strong>
                      </h4>{" "}
                      In this mode, each data bit (1 or 0) is represented by a magnetic transition (a direction of magnetization). 
                      The bits are separated by a neutral value (non-magnetized zone). 
                      It is this absence of magnetization that corresponds to zero.
                      <br />
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={ReturnToZero}
                      title={"Return To Zero"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                     <h4>
                        <strong>6.2.NRZ mode (Non Return to Zero) :</strong>
                      </h4>{" "}
                      Unlike the RZ mode, the NRZ (Non Return to Zero) mode does not require a return to zero after each bit.
                      In NRZ mode, the magnetic state remains constant throughout the duration of a sequence of
                      equal bits, whether they are 1s or 0s, which means there is no magnetic transition in the middle. 
                      Another magnetic state is generated only if there is a transition from 1 to 0 or from 0 to 1.
                      <br />
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={NoReturnToZero}
                      title={"Non Return To Zero"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                     <h4>
                        <strong>6.3.PE mode (Phase Encoding) :</strong>
                      </h4>{" "}
                      In this mode, each data bit is represented by two small magnets. 
                      In between, there is a transition. 
                      If this transition is positive, we have a 1, if it is negative, we have a 0.
                      <br />
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={PhaseEncoding}
                      title={"Phase Encoding"}
                      description={``}
                    />
                  ),
                },
                {
                  id: 227,
                  title: "7) Recording Formats",
                  subChapterContent: (
                    <p>
                      <h4>
                      <strong>7.1.1.Recording format in NRZ mode:</strong>
                      </h4>{" "}
                      In this mode, control characters are added to the physical block. 
                      This integration aims to allow control mechanisms to verify the integrity of data, 
                      whether during writing or reading. The main control characters used 
                      for this purpose are the CRC (Cyclic Redundancy Check) and the LRC (Longitudinal Redundancy Check). 
                      The reading process of a block starts at the first byte identified after a GAP and continues until the
                      next GAP is detected. During reading, only the actual data (logical records) 
                      are transferred to the main memory. Control characters are not transmitted.
                      <h4>
                        <strong>A-Unblocked recording (F=1):</strong>
                      </h4>
                      In this case, the number of control characters (CRC and LRC) is equal to the number of logical records, 
                      since each block contains only one logical record, resulting in a significant loss of storage space.
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={NRZNBloque}
                      title={"Recording format in NRZ mode:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>B-Blocked recording (F &gt; 1):</strong>
                      </h4>
                      In this case, the number of control characters (CRC and LRC) is equal to the number of logical records, 
                      since each block contains only one logical record, resulting in a significant loss of storage space.
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={NRZBloque}
                      title={"Recording format in NRZ mode:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                      <strong>7.1.2.Recording format in PE mode:</strong>
                      </h4>{" "}
                      In this mode, 41 characters, called synchronization characters, 
                      are inserted before and after the useful data. 
                      The reading process of a block begins with the first record following the 41 synchronization characters and continues until the next 41 
                      characters are identified.<h4>
                      <strong>A-Unblocked recording (F=1):</strong>
                      </h4>
                      Each logical record begins and ends with 41 synchronization characters.
                      <br />
                    </p>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={PENBloque}
                      title={"Recording format in PE mode:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>B-Blocked recording (F &gt; 1):</strong>
                      </h4>
                      Each physical block (containing several logical records) begins and ends with 41 synchronization characters.
                      <br />
                    </p>
                  ),
      
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={PEBloque}
                      title={"Recording format in PE mode:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>7.2.Characteristics of a magnetic tape:</strong>
                      </h4>{" "}
                      The main characteristics of a magnetic tape are as follows:
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>A.Storage capacity:</strong>
                      </h4>{" "}
                      <br />
                      The storage capacity of a magnetic tape is generally expressed in terabytes (TB) or gigabytes (GB), 
                      depending on the technology and recording density. Modern magnetic tapes can offer capacities ranging from a few tens of GB 
                      to several TB per cartridge.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>B.Recording density:</strong>
                      </h4>{" "}
                      <br />
                      Recording density indicates the number of bits recorded per unit length, 
                      generally expressed in bpi (bits per inch). 
                      A higher recording density allows more data to be stored on the same length
                      of tape. The recording density of magnetic tapes is constantly increasing 
                      and can vary depending on the technology, format, and manufacturer. 
                      However, modern magnetic tapes typically offer high recording densities, ranging from 6,000 to 50,000 bpi.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C.Tape width:</strong>
                      </h4>{" "}
                      <br />
                      The tape width is the physical width of the magnetic tape. It can vary
                      depending on the technology and application, ranging from a few
                       millimeters to several inches.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>D.Tape width:</strong>
                      </h4>{" "}
                      <br />
                      Tape length: The tape length determines the total storage capacity
                      of a tape cartridge. Magnetic tapes can vary in length, 
                      ranging from a few meters to several tens of meters.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>E.Lifespan and reliability:</strong>
                      </h4>{" "}
                      <br />
                      Magnetic tapes are generally designed to have a long lifespan 
                      and good reliability for long-term data preservation. 
                      A high-quality magnetic tape can last for several decades.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>F.Types of tapes:</strong>
                      </h4>{" "}
                      <br />
                      There are different types of magnetic tapes, including backup 
                      tapes, data storage tapes, tapes for audio/video production, etc.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>E.Sequential access:</strong>
                      </h4>{" "}
                      <br />
                      Sequential access mode is the most common for magnetic tapes. 
                      Data is stored linearly on the tape, and to access a specific piece 
                      of data, you need to traverse the magnetic tape from the beginning 
                      (or from a specific point) sequentially until reaching the desired block. 
                      This means that data access occurs in the order in which it was recorded. 
                      Sequential access is generally slower because it requires traversing 
                      the entire magnetic tape or a long distance to access a specific piece of data. 
                      The search speed depends on the speed of the tape scrolling, recording density, and the total length of the tape.
                      <br />
                      </p>
                  ),
                  subChapterVisualisation: null, // no visualisation is needed for this subchapter            
                },
                {
                  // TO DO Bouhamza
                  id: 228,
                  title: "8) Magnetic disks",
                  subChapterContent: (
                    <div>
                      <h4>
                        <strong>A.disk organization</strong>
                      </h4>
                      To store information on the disk, an adequate organization is necessary to facilitate writing and reading operations. 
                      This organization is referred to in computing terms as formatting.
                      The formatting operation involves organizing the disk into tracks and sectors. 
                      Each side of a disk platter is divided into tracks, which are concentric circles numbered starting from 0 from the outside. 
                      Depending on the model, the number of tracks per side varies from 10 to over 1,000. 
                      There is an inter-track space between each track where no information is recorded. 
                      Each track is further divided into equal-sized parts called sectors (ranging from 4 to 32 sectors per track), 
                      with the sector being the smallest unit of reading/writing on the disk. The size of a sector typically ranges from 32 to 4,096 bytes, 
                      with a common value being 512 bytes. Sectors are also separated by inter-sector spaces.
                      Thus, the smallest physically accessible unit on the disk is the sector. To optimize reading and writing operations, 
                      sectors are grouped into blocks. A block consists of several sectors and represents the smallest unit of exchange between 
                      the disk and the central memory.
                    </div>
                  ),
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={DiskOrganization}
                      title={"disk organization:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>B-Physical recording format (F &gt; 1):</strong>
                      </h4>
                      A physical record (block) consists of four zones: the address mark, the counting zone, the key zone, and the data zone.
                      <br />
                    </p>
                  ),

                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={FormEnrg}
                      title={"RecordingPhysical recording format:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C-Recording formats :</strong>
                      </h4>
                      The format of data recorded on addressable media depends on the type of records (fixed-size, variable-size, or indefinite-size), as well as whether these records are blocked or unblocked. Below, we'll cover:
                      <br />
                      -The format of unblocked fixed-size records (F=1)
                      <br />          
                      -The format of blocked fixed-size records
                      <br />
                      -The format of unblocked variable-size records (F=1)
                      <br />
                      -The format of blocked variable-size records
                      <br />
                    </p>
                  ),
      
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C.1.The format of unblocked fixed-size records (F=1):</strong>
                      </h4>
                      In this case, all records in the file have a fixed length. 
                      Each data zone contains a single logical record, 
                      with the key zone reserved for the record identifier, if it has one. Typically, 
                      this identifier is not repeated in the data zone.
                      <br />
                    </p>
                  ),
      
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={FormEnrgFixedSizeNonBlocked}
                      title={"The format of unblocked fixed-size records (F=1):"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C.2.The format of blocked fixed-size records</strong>
                      </h4>
                      In this case, all records in the file have a fixed length. 
                      Each block contains multiple logical records. 
                      Therefore, all blocks are of the same size, except for the last one, 
                      which may be shorter.If logical records have an identifier, there is:
                      <br />
                      -At the level of each block, the key zone will contain the largest identifier of the logical records within the block.
                      <br />
                      -At the level of each logical record, there is a key zone, which will contain the key of the logical record.
                      <br />
                    </p>
                  ),
      
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={FormEnrgFixedSizeBlocked}
                      title={"The format of blocked fixed-size records:"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C.3.The format of unblocked variable-size records (F=1)</strong>
                      </h4>
                      In this case, the length of logical records is variable, but it is between two known bounds. 
                      Each physical record contains a counter indicating the length of 
                      the logical record, including the counter itself. Another counter
                      indicates the length of the block, also including this counter. 
                      Although this second counter has no utility in the case of unblocked records,
                      it is still present.
                      <br />
                    </p>
                  ),
      
                  subChapterVisualisation: (
                    <VisualisationComponent
                      animationData={FormEnrgVarSizeNonBlocked}
                      title={"The format of unblocked variable-size records (F=1)"}
                      description={``}
                    />
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>C.4.The format of blocked variable-size records</strong>
                      </h4>
                      In this case, the format of the data zone is similar to that of the unblocked record. 
                      In the presence of identifiers for the logical records, a specific zone is dedicated to 
                      the largest identifier among those of the records in the block.
                      <br />
                    </p>
                  ),
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>D-Recording density on a disk</strong>
                      </h4>
                      Recording density on a disk represents the number of bits that can be stored 
                      per inch along a recording track, measured in bpi (bits per inch). 
                      Generally, the density is calculated according to the following formula:
                      <br />
                      <h4>
                        <strong>D = Nb / L</strong>
                      </h4>
                      As :
                      <br />
                      - Nb : The number of bits.
                      <br />
                      - L : Length in inches.
                      <br />
                      The linear recording density per track is calculated as follows:
                      <h4>
                        <strong>Dl = Nbp / L</strong>
                      </h4>
                      <br />
                      As :
                      <br />
                      - Nbp : Number of bits per track
                      <br />
                      - L: Length of a track in inches
                      <br />
                    </p>
                  ),
      
                },
                {
                  subChapterContent: (
                    <p>
                      <h4>
                        <strong>E-Hard disk capacity</strong>
                      </h4>
                      The capacity of a hard disk is the amount of data it can store. 
                      It is expressed in bytes, kilobytes, and beyond (see the table below). 
                      The capacity of a disk depends on its geometry and sector capacity.
                      <br />
      
                      <h4>
                        <strong>Cd = Cs * Nsp * Nc * Nt</strong>
                      </h4>
      
                      <br />
                      - Cs: Sector capacity.
                      <br />
                      - Nsp: Number of sectors per track.
                      <br />
                      - Nc: Number of cylinders.
                      <br />
                      - Nt: Number of heads.
                      <br />
                    </p>
                  )
                },
          ]},

      // TODO Chakib
      { chapterId: 3, title: "....", chapterDescription: "" },
      {
        chapterId: 4,
        title: "Index structures",
        chapterDescription:
          "Chapter 3 addresses index structures, which are essential for accelerating the search for records in a database. It begins by defining general concepts, including the search key, which is used to retrieve specific records. The index is presented as a data structure in main memory (MM) or secondary memory (SM), offering single-key and multi-key access methods. In the context of single-key access, various types of indexes are explored, such as MM indexes, SM indexes, and multi-level indexes. The use of MM indexes for searching, inserting, and deleting records is detailed. Additionally, the process of creating, saving, and loading indexes is discussed. The chapter also covers aspects of multi-key access, where multiple attributes are used for searches. It presents techniques such as independent indexes, inverted indexes, and bitmap indexes to efficiently handle these queries. The use of MM indexes in the form of binary search trees and the exploration of large indexes are also addressed. Finally, the chapter explores the steps of a multi-key query, including the use of secondary and primary indexes to filter and retrieve relevant records. It also discusses the procedures for inserting and deleting records, emphasizing the updating of associated indexes. In summary, this chapter provides a comprehensive understanding of index structures and their effective use in database management.",
        subChapter: [
          {
            id: 111,
            title: "1) Introduction",
            subChapterContent: (
              <div>
                <p>
                  Sequential file structures can become inefficient when the
                  data file grows in size. Operations such as searching and
                  inserting become less efficient. Indexing methods aim to
                  enhance performance by managing an auxiliary structure (index
                  table) that accelerates the <strong>search</strong> for
                  records.
                </p>
                <br />
                <h4>
                  <strong>1.1 Defenition of Index</strong>
                </h4>
                <p>
                  An index is a data structure used to speed up the retrieval of
                  records in memory or on disk. It helps find specific data
                  quickly within a file or database. By organizing key-value
                  pairs or pointers, indexes make it easier to access the
                  information you need, improving the efficiency of data
                  searches.
                  <br />
                  Often, an index is an ordered table in main memory,
                  containing, among other things, pairs:
                  <br />
                  <strong>{"<key_value, record_address>."}</strong>
                </p>
                <br />
                <h4>
                  <strong>1.2 The uses of index table :</strong>
                </h4>{" "}
                <ol>
                  <li>
                    <strong>-Speeding Up Searches</strong>: An index table
                    allows for faster data retrieval by providing quick access
                    to the location of records.
                  </li>
                  <li>
                    <strong>-Efficient Sorting</strong>: It helps in efficiently
                    sorting data based on indexed columns, making it easier to
                    retrieve sorted results.
                  </li>
                  <li>
                    <strong>-Facilitating Range Queries</strong>: Index tables
                    enable efficient execution of range queries, such as finding
                    all records within a specific range of values.
                  </li>

                  <li>
                    <strong>-Improving Filtering</strong>: Indexes allow for
                    faster filtering of records based on specific criteria,
                    reducing the need to scan entire tables.
                  </li>
                  <li>
                    <strong>-Boosting Aggregate Functions</strong>: They enhance
                    the performance of aggregate functions (e.g., COUNT, SUM) by
                    quickly accessing the relevant data.
                  </li>
                  <li>
                    <strong>-Optimizing Query Performance</strong>: Overall,
                    index tables optimize query performance by reducing the time
                    and computational resources required for data retrieval.
                  </li>
                </ol>
                <br />
                <h4>
                  <strong>1.3 Search Key :</strong>
                </h4>
                The 'search key', or set of criteria used to locate records, is
                pivotal in data retrieval:
                <p>
                  <strong>Example of searches :</strong>'Person.dat'
                  {" < Id , Name, Age >"}
                  <br />→ For the 'Id' search key with value '0005': Result:
                  <br />
                  '0005' , 'Mia Lee' , 21
                  <br />→ For the 'Age' search key with value '049': Result:
                  <br></br>
                  '0007','Ava Doe','49'
                  <br></br>
                  '0010','Farah Ole','49'
                </p>
                <br></br>
                <br />
              </div>
            ),
            subChapterVisualisation: (
              <VisualisationComponent
                animationData={creatingDanceTable}
                height={500}
                width={500}
                title={"Example of Creating an Index table for a TOF File"}
                description={
                  "We will use a concrete example to illustrate the creation of a dense index table for a file viewed as TOF (Table Ordered with Fixed-length records). Suppose we have a data file containing information about students ,The records are ordered by ID"
                }
              />
            ),
          },
          {
            id: 166,
            title: "2) Single-key access",
            subChapterContent: (
              <div>
                <p>
                  The key can be either unique-valued or non-unique
                  (multiple-valued).
                </p>
                <br></br>
                <h4>
                  <strong>
                    2.1 Representations of multi-valued index tables:
                  </strong>
                </h4>
                <ul>
                  <li>-One entry per key value</li>
                  <li>-Multiple entries per key value</li>
                </ul>
                (Check Visualisation bellow)
              </div>
            ),
            subChapterVisualisation: (
              <VisualisationComponent
                animationData={RepresentationsOfMultiValued}
                height={500}
                width={500}
                title={"Representations of multi-valued index tables"}
                description={""}
              />
            ),
          },
          {
            id: 177,
            title: "2.2 Dense Index (Non-Clustered Index):",
            subChapterContent: (
              <div>
                <p>
                  An index is termed 'dense' if it includes all values of the
                  key attribute from the data file. In such cases, maintaining
                  the file's order based on this attribute is unnecessary.
                </p>
                <br></br>
                <h4>
                  <strong>2.3 Non-Dense Index (Clustered Index):</strong>
                </h4>
                <p>
                  Conversely, an index is labeled 'non-dense' if it doesn't
                  encompass all values of the key attribute from the data file.
                  For instance, only one value per block or group of blocks may
                  be retained in the index. Consequently, the file must be
                  organized based on the indexed attribute. One advantage of a
                  non-dense index is its reduced size compared to a dense index
                  for the same data file.
                  <br></br>
                  <strong>→Example On dense and Non-dense index :</strong>
                  <br></br>
                  Consider a File storing information about students, where each
                  student has a unique student ID.
                </p>
                <table class="min-w-full border border-yellow-400 my-5">
                  <thead>
                    <tr>
                      <th
                        scope="col"
                        class="px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider"
                      >
                        Department ID
                      </th>
                      <th
                        scope="col"
                        class="px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider"
                      >
                        Student ID
                      </th>
                      <th
                        scope="col"
                        class="px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider"
                      >
                        Name
                      </th>
                      <th
                        scope="col"
                        class="px-4 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider"
                      >
                        Age
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        101
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        001
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        John
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        20
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        103
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        002
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Alice
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        22
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        101
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        003
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Emily
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        21
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        109
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        004
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Michael
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        23
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        102
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        005
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Sophia
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        19
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        101
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        006
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        William
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        24
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        102
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        007
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Sam
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        21
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        103
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        008
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Rick
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        20
                      </td>
                    </tr>
                    <tr>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        110
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        009
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        Adam
                      </td>
                      <td class="px-4 py-2 whitespace-nowrap border border-yellow-400 text-blue-700">
                        26
                      </td>
                    </tr>
                  </tbody>
                </table>
                <p>
                  If we create an index table on the student ID column, it would
                  be considered dense because the file is Ordered on Id.
                  <br></br>
                  In this example, a dense index on the student ID does not
                  conatain all the students Id,(for example it could contain the
                  last/first student ID of each Block)
                  <br></br>
                  But if we create an index table on the department ID column,
                  it would be considered non-dense, the file is not Ordered on
                  department Id
                  <br></br>
                  In this example, a non-dense index on the department ID
                  conatains all the Departements Id
                </p>
              </div>
            ),
            subChapterVisualisation: (
              <VisualisationComponent
                animationData={creatingDanceTable}
                height={500}
                width={500}
                title={"Example of Creating an Index table for a TOF File"}
                description={
                  "We will use a concrete example to illustrate the creation of a dense index table for a file viewed as TOF (Table Ordered with Fixed-length records). Suppose we have a data file containing information about students ,The records are ordered by ID"
                }
              />
            ),
          },
          {},
        ],
      },
    ],

    path: "/courses/sfsd/learn",
    quiz: "/courses/sfsd/quiz", // quiz route will redirect to the next page if finished (congrats on every finish)
    next: "/courses/algebra/learn",
  },

  //algebre 
  {
    id: 11,
    title: "algebra",
    description: "algebra",
    chapters: [
      {
        chapterId: 1,
        title: "Review of Algebra 2 Concepts",
        chapterDescription: (<p></p>),
        subChapter: [
          {
            id: 111,
            title: "1) Review of Vector Spaces",
            subChapterContent: (
              <div>
                Let (E,+) be a group (written additively) soit (E, +) un groupe (noté additivement) et K un corps (K = Q , R ou C).(K, + , .)
                <br />
                (represents addition and multiplication (usually within R))
                <br />
                <strong>E is said to be a vector space over K if</strong>
                <br />
                1. (E, +) is an abelian group (+ is commutative).
                <br />
                2. il existe une loi notée . (externe)There exists a law denoted (external):
                <br />
                K×E → E
                <br />
                (d,x) → d⋅x,  d∈K,  x∈E
                <br />
                -  d ⋅ (x+y) = d ⋅ x + d ⋅ y
                <br />
                - (d + β) ⋅ x = d ⋅ x + β ⋅ x
                <br />
                - ( dβ ) ⋅ x = d ⋅ ( β ⋅ x )
                <br />
                - 1 K​⋅ x = x
                <br />
                <br />
                <strong>Examples :</strong>
                <br />
                1- K = R
                <br />
                1.1 R^(n) is a vector space over R.
                <br />
                (x 1​,…,x n​)+(y1​,…,yn​)=(x 1​+y1​,…,x n​+y n​)
                <br />
                d⋅(x 1​,…,xn​)=(dx1​,…,dxn​)
                <br />
                1.2 R[x]=&#123; p (polynomial with coefficients in R) &#125;
                <br />
                1.3 Rn​[x]=&#123; p∈R[x]∣degp≤n &#125;
                <br />
                <strong>F is said to be a subspace of E if</strong>
                <br />
                a- (F , +) s/g de (E , +)
                <br />
                b- d ∈ K , x ∈ F , d.x ∈ F
                <br />
                <strong>Remarks :</strong>
                <br />
                A- F1 and F2 are subspaces of E so F1 ∩ F2  is subspace
                <br />
                B- The union is not always a subspace.
                <br />
                C- F1 + F2 = &123; f1 + f2 / f1 ∈ F1 , f2 ∈ F2 &125; is subspace of E.
                <br />
                dim (f1 + f2) = dim f1 + dim f2 - dim F1 ∩ F2
                <br />
                D- If F1 + F2 = E and F1 ∩ F2 = &123; neutral element of E &125; =&gt; F1 is supplementary to F2 in E. ( or the inverse)
              </div>
            ),
            subChapterVisualisation: null, // no visualisation is needed for this subchapter
          },
          {
            id: 112,
            title: "2) linear mappings",
            subChapterContent: (
              <div>
                Let f be a function : f : E → E (E and F are two subspaces in R)
                <br />
                f is said to be linear if :
                <br />
                A- f(x + y) = f(x) + f(y)
                <br />
                B- f(d x) = d f(x)
                <br />
                <strong>OR</strong>
                -f(ax + by)
              </div>
            ),
            subChapterVisualisation: null, // no visualisation is needed for this subchapter
          },
        ],
      },
      {
        chapterId: 2,
        title: "chapter two algebre",
        chapterDescription: (
          <p>
            ...........
          </p>
        ),
        subChapter: [
          {
            id: 111,
            title: "1) pppppppppppppiiiiiiiiiiiii",
            subChapterContent: (
              <div>
                ..................
              </div>
            ),
            subChapterVisualisation: null, // no visualisation is needed for this subchapter
          },
        ],
      },
    ],
    path: "/courses/algebra/learn",
    quiz: "/courses/algebra/quiz", // quiz route will redirect to the next page if finished (congrats on every finish)
    next: "/courses/completed_path",
  },

];
